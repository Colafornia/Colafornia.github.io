<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Minibase</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mechanicianw.github.io/"/>
  <updated>2018-01-13T13:19:40.000Z</updated>
  <id>http://mechanicianw.github.io/</id>
  
  <author>
    <name>Mechanician</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回顾一下 JavaScript 中的深浅拷贝以及内存管理</title>
    <link href="http://mechanicianw.github.io/2018/01/13/review-copy-in-javascript/"/>
    <id>http://mechanicianw.github.io/2018/01/13/review-copy-in-javascript/</id>
    <published>2018-01-13T01:05:00.000Z</published>
    <updated>2018-01-13T13:19:40.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/review-copy-in-javascript.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在组内 code review 中遇到了一处业务代码中需要深拷贝的地方，同学简单地通过 &lt;code&gt;JSON.parse(JSON.stringify(target))&lt;/code&gt; 来进行，在讨论中发现了一些好玩的东西，特此来回顾一下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;基本类型-VS-引用类型，值传递-VS-引用传递&quot;&gt;&lt;a href=&quot;#基本类型-VS-引用类型，值传递-VS-引用传递&quot; class=&quot;headerlink&quot; title=&quot;基本类型 VS 引用类型，值传递 VS 引用传递&quot;&gt;&lt;/a&gt;基本类型 VS 引用类型，值传递 VS 引用传递&lt;/h3&gt;&lt;p&gt;首先回顾一下高程中的基本概念。&lt;/p&gt;
&lt;p&gt;ECMAScript 变量包含两种数据类型的值：基本类型值与引用类型值。基本类型指的是简单的数据段，如 &lt;code&gt;Undefined&lt;/code&gt;、&lt;code&gt;Null&lt;/code&gt;、&lt;code&gt;Boolean&lt;/code&gt;、&lt;code&gt;Number&lt;/code&gt; 和 &lt;code&gt;String&lt;/code&gt;（ES6 中出现的 &lt;code&gt;Symbol&lt;/code&gt; 也属于基本类型）。引用类型指的是可能由多个值构成的对象。&lt;/p&gt;
&lt;p&gt;基本类型是按值访问的，&lt;strong&gt;可以操作保存在变量中的实际的值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;引用类型的值是保存在内存中的对象，&lt;strong&gt;JavaScript 不允许直接访问内存中的位置&lt;/strong&gt;，因此我们在操作对象时，是在操作对象的引用而不是实际的对象。&lt;/p&gt;
&lt;p&gt;然而访问变量有按值和按引用两种方式，而 &lt;strong&gt;参数只能按值传递&lt;/strong&gt;。在向参数传递引用类型的值时，会把值在内存中的地址复制给另一个局部变量。&lt;/p&gt;
&lt;h3 id=&quot;深入内存&quot;&gt;&lt;a href=&quot;#深入内存&quot; class=&quot;headerlink&quot; title=&quot;深入内存&quot;&gt;&lt;/a&gt;深入内存&lt;/h3&gt;&lt;p&gt;以上虽然不难理解，但是不深层挖掘一下还是很难完全记住。所以来看看内存中到底发生了什么吧。&lt;/p&gt;
&lt;p&gt;先看看内存的生命周期：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dt-fe/weekly/master/assets/29/1.jpg&quot; alt=&quot;life&quot;&gt;&lt;/p&gt;
&lt;p&gt;即 内存分配 =&amp;gt; 内存读写 =&amp;gt; 内存释放&lt;/p&gt;
&lt;p&gt;JavaScript 在定义变量时即完成了内存分配。&lt;strong&gt;运算符= 就是创建或修改变量在内存中的指向。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123; b: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;; &lt;span class=&quot;comment&quot;&gt;// a 为引用类型，给 a 分配内存 &amp;#123; b: 1 &amp;#125;， a 存储的即为 &amp;#123; b: 1 &amp;#125; 的地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = a; &lt;span class=&quot;comment&quot;&gt;// 给 c 分配内存 指向 a 存储的地址，即 &amp;#123; b: 1 &amp;#125; 的地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 修改 a 的内存指向到 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(c); &lt;span class=&quot;comment&quot;&gt;// c 存储的仍为 &amp;#123; b: 1 &amp;#125; 的地址，因此结果为 &amp;#123; b: 1 &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前两行代码在内存中的分布为：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;变量&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;内存&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;a&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;{ b: 1 } 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;c&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;{ b: 1 } 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第三行修改了内存指向：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;变量&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;内存&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;a&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;变量 c 仍然指向 { b: 1 } 的地址。&lt;/p&gt;
&lt;p&gt;再看一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m = &amp;#123; a: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, b: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n = m; &lt;span class=&quot;comment&quot;&gt;// 复制引用类型的值，使 n 和 m 指向同一地址&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;n.a = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(m.a);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还是先看前两行：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;变量&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;内存&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;m&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;{ a: 10, b: 20 } 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;{ a: 10, b: 20 } 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第三行通过 n.a 修改了变量，但 m 和 n 仍然指向同一地址不变，因此 m.a 的值也为 15&lt;/p&gt;
&lt;p&gt;对于参数传递过程中的内存变化不是本文重点，可以观摩 &lt;a href=&quot;https://github.com/mqyqingfeng/Blog/issues/10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript深入之参数按值传递&lt;/a&gt; 下面精彩的评论来学习。&lt;/p&gt;
&lt;p&gt;有很多博文还针对 JavaScript 的内存空间，栈内存与堆内存进行了讲解，但是对于这方面实在没有经验，没什么鉴别能力，暂时先不说了。&lt;/p&gt;
&lt;h3 id=&quot;JavaScript-中的深浅拷贝&quot;&gt;&lt;a href=&quot;#JavaScript-中的深浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 中的深浅拷贝&quot;&gt;&lt;/a&gt;JavaScript 中的深浅拷贝&lt;/h3&gt;&lt;p&gt;回顾完以上知识点后，可以发现对于对象的拷贝，其实分为两种情况（这里，将被拷贝对象称为源对象）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shallow clone 浅拷贝：如果对象中某个属性值是对象的话，浅拷贝的只是内存指针，当内存中的值发生变化后，拷贝对象与源对象与都会发生改变。&lt;/li&gt;
&lt;li&gt;deep clone 深拷贝：拷贝对象与源对象是完全单独的对象，没有属性值是指向同一内存指针的，源对象发生任何修改都不会引起拷贝对象发生变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意一点，ES6 中 Object 的新方法 &lt;code&gt;Object.assign&lt;/code&gt; 执行的就是浅拷贝，Stack Overflow 上有一个高票回答误将其答为深拷贝，我就踩了坑，避免加深错误印象，这里不放链接了。&lt;/p&gt;
&lt;p&gt;ES6 中的 Object &lt;code&gt;rest/spread destructuring&lt;/code&gt; 也是浅拷贝：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; existing = &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; ...clone &amp;#125; = existing;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于深拷贝，可想而知，需要对嵌套对象进行递归遍历，但是真正实现 deep clone 没有想象的简单，主要原因在于 deep clone 的定义并不统一，以及 edge case 非常多，包含 DOM/BOM 对象如何处理，函数如何处理，原型链如何处理等问题。但是希望 “做出修改不影响其它引用” 确实是一个常见场景。&lt;/p&gt;
&lt;p&gt;最简单的方法就是开头提到的 &lt;code&gt;JSON.parse(JSON.stringify(target))&lt;/code&gt;。缺点在于无法处理 Date、Function 等类型的属性值。&lt;/p&gt;
&lt;p&gt;因此在业务中推荐使用 lodash 的 &lt;a href=&quot;https://lodash.com/docs/4.17.4#cloneDeep&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;_.cloneDeep&lt;/a&gt; 实现深拷贝，简洁可靠。&lt;/p&gt;
&lt;p&gt;实际上，在 &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;immutable.js&lt;/a&gt; 出现后，实现数据结构的持久化有了更优雅的方式。&lt;/p&gt;
&lt;h3 id=&quot;希望之光-Immutable&quot;&gt;&lt;a href=&quot;#希望之光-Immutable&quot; class=&quot;headerlink&quot; title=&quot;希望之光 Immutable&quot;&gt;&lt;/a&gt;希望之光 Immutable&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4c698f4cef2ae6b69873aa7de91f6d10f28162e1/687474703a2f2f696d672e616c6963646e2e636f6d2f7470732f69312f544231796b395f4b585858585862565846585845745848387058582d3930302d3334322e706e67&quot; alt=&quot;Immutable&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript 中的对象一般都是可变的（mutable），虽然节省了内存，却给复杂的大型应用造成很多隐患。Immutable Data 为一旦创建，就不能再被修改的数据。通过 &lt;strong&gt;Persistent Data Structure&lt;/strong&gt;（持久化数据结构）使得在使用旧数据创建新数据时，也保证了旧数据同时可用且不变。&lt;/p&gt;
&lt;p&gt;前面所述的 deep clone 方法是把所有节点都复制一遍，性能损耗非常大。Immutable 使用了 &lt;strong&gt;Structural Sharing&lt;/strong&gt;（结构共享），性能提升很多。&lt;/p&gt;
&lt;p&gt;通过 immutable.js 实现 deep clone:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; defaultConfig = Immutable.fromJS(&amp;#123;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; config = defaultConfig.merge(initConfig); &lt;span class=&quot;comment&quot;&gt;// defaultConfig不会改变，返回新值给 config&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; config = defaultConfig.mergeDeep(initConfig); &lt;span class=&quot;comment&quot;&gt;// 深层merge&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;immutable.js 提供了7种不可变的数据结构：List, Stack, Map, OrderedMap, Set, OrderedSet, Record。&lt;/p&gt;
&lt;p&gt;虽然 immutable.js 通常与 facebook 同厂出品的 React 一起使用，但是它其实是一个完全独立的库，无论基于什么框架都可以使用。说它是希望之光并没有言过其实。更多内容可以查看 &lt;a href=&quot;https://github.com/camsong/blog/issues/3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Immutable 详解及 React 中实践&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/review-copy-in-javascript.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在组内 code review 中遇到了一处业务代码中需要深拷贝的地方，同学简单地通过 &lt;code&gt;JSON.parse(JSON.stringify(target))&lt;/code&gt; 来进行，在讨论中发现了一些好玩的东西，特此来回顾一下。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://mechanicianw.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 年度总结</title>
    <link href="http://mechanicianw.github.io/2017/12/31/2017-review/"/>
    <id>http://mechanicianw.github.io/2017/12/31/2017-review/</id>
    <published>2017-12-31T04:00:00.000Z</published>
    <updated>2017-12-31T14:12:24.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/tokyo-in-2017.jpg&quot; alt=&quot;tokyo in 2017&quot;&gt;&lt;/p&gt;
&lt;p&gt;2017: no silver bullet.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h4&gt;&lt;p&gt;二月底入职了美团，到现在也快一年了。&lt;/p&gt;
&lt;p&gt;借助于在下厨房时一行一行代码 review 出的好习惯以及一些技术选型上的经验红利，这大半年包括职级晋升也过得还是很顺利。在此非常感谢也怀念在下厨房的那些菜鸟日子。&lt;/p&gt;
&lt;p&gt;美团的知识wiki 藏龙卧虎，有完善的新人培养以及 Mentor 机制，每天各个 BU 都有些质量很不错的技术分享，精力足够的话在新人期是有非常多的机会去学习观摩的。在终端组时还有被要求记录 work log，虽然一开始有些痛苦，最后还是养成了注重人效与时间管理的习惯。&lt;/p&gt;
&lt;p&gt;除了以上，最大的感受还是在于，一直被培养“做事的方法”，要求注重软素质。在大厂当螺丝钉，基本不会遇到每天应付 PM 改需求，调整开发时间这类事。PM 包办了项目管理，与业务方的沟通等事情，作为 FE 只需要确定好自己的估时排期，关注后端提供的接口定义就可以。好处显而易见，坏处就是过于螺丝钉了，没什么机会去做自身领域外的事情。今后还是需要自己多努力扩展能力边界。&lt;/p&gt;
&lt;h4 id=&quot;生活&quot;&gt;&lt;a href=&quot;#生活&quot; class=&quot;headerlink&quot; title=&quot;生活&quot;&gt;&lt;/a&gt;生活&lt;/h4&gt;&lt;p&gt;四月的时候去了趟日本，走了东京和伊东两座城市。在东京六本木的观景台拍了题图这张夜景。伊豆半岛的性价比很高，和牛比在东京吃的更好吃，因为没什么游客，看到了蛮多更市井的场景。感觉出来玩还是慢悠悠的会比较有意思。&lt;/p&gt;
&lt;p&gt;生活中最重要的事是，年底把户口迁到了成都。买房和定居还不一定是什么时候，应该要等工作能力再提高一些，不那么菜之后再说。时隔三年又去了一次成都，除了好吃更感觉是真的安逸。&lt;/p&gt;
&lt;p&gt;就在跨年这两天，我搬家到了望京这边，换了一个一居室，更适合猫猫住。离公司近一些，节省了通勤时间，想把节省的时间用在健身上。毕业一年半，体质是稳步地下降，精力不太够用，嗜糖这一坏习惯也没有多大好转。再这样下去应该是迟早 💊。&lt;/p&gt;
&lt;p&gt;今年有在做基金定投，收益 10% 左右，只是年底由于订明年出行的机票酒店吃了波土，最后两个月没有继续投入了。这种强制储蓄的理财方式确实很实用，只是需要每月都在发薪日投出去，免得最后又花超了变月光。&lt;/p&gt;
&lt;h4 id=&quot;📚-和-🎬&quot;&gt;&lt;a href=&quot;#📚-和-🎬&quot; class=&quot;headerlink&quot; title=&quot;📚 和 🎬&quot;&gt;&lt;/a&gt;📚 和 🎬&lt;/h4&gt;&lt;p&gt;今年一共看了 13 本书，去年制定的看书计划基本完成了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;《学习JavaScript数据结构与算法》&lt;/li&gt;
&lt;li&gt;《禅与摩托车维修艺术》&lt;/li&gt;
&lt;li&gt;《程序员修炼之道 : 从小工到专家》&lt;/li&gt;
&lt;li&gt;《Node.js实战》&lt;/li&gt;
&lt;li&gt;《图解HTTP》&lt;/li&gt;
&lt;li&gt;《Web全栈工程师的自我修养》&lt;/li&gt;
&lt;li&gt;《牛津通识读本 : 数学》&lt;/li&gt;
&lt;li&gt;《刻意练习》&lt;/li&gt;
&lt;li&gt;《淘宝技术这十年》&lt;/li&gt;
&lt;li&gt;《亲密关系》&lt;/li&gt;
&lt;li&gt;《地球与太空》&lt;/li&gt;
&lt;li&gt;《一首小夜曲》&lt;/li&gt;
&lt;li&gt;《死神的精确度》&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;只是技术上没看什么大部头，还有几本已经看到最后几章但是计划被打乱迟迟没有看完。&lt;/p&gt;
&lt;p&gt;电影看了 79 部，从豆瓣的报告来看还是院线片居多，可能也反映出了心态比较浮躁吧。&lt;/p&gt;
&lt;h4 id=&quot;新的计划&quot;&gt;&lt;a href=&quot;#新的计划&quot; class=&quot;headerlink&quot; title=&quot;新的计划&quot;&gt;&lt;/a&gt;新的计划&lt;/h4&gt;&lt;p&gt;这里只列举一些急切需要完成（三个月内）的事。在此推荐一个最近感觉很好用的 APP， &lt;a href=&quot;https://www.v2ex.com/t/413134#reply11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的小目标&lt;/a&gt;，是由一名 iOS 开发者独立开发的个人作品，其中集成了番茄钟与单核工作法，金币积攒与消耗这种类似于打怪升级的模式很适合我。&lt;/p&gt;
&lt;p&gt;待办事项：&lt;br&gt;1.读完《JavaScript 设计模式与开发实践》&lt;br&gt;2.完成《Git 原理解析》的 blog &amp;amp;&amp;amp; 分享&lt;br&gt;3.移动端预渲染方案&lt;/p&gt;
&lt;p&gt;习惯养成：&lt;br&gt;1.leetcode每周一题&lt;br&gt;2.每周健身一次（看看前五周降体脂的效果如何&lt;br&gt;3.每周在掘金翻译计划校对/推荐文章一次&lt;/p&gt;
&lt;h4 id=&quot;Less-is-more&quot;&gt;&lt;a href=&quot;#Less-is-more&quot; class=&quot;headerlink&quot; title=&quot;Less is more&quot;&gt;&lt;/a&gt;Less is more&lt;/h4&gt;&lt;p&gt;最后还是总结一下，生活和工作上都没有银弹，好好管理生活与代码的复杂度。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/tokyo-in-2017.jpg&quot; alt=&quot;tokyo in 2017&quot;&gt;&lt;/p&gt;
&lt;p&gt;2017: no silver bullet.&lt;/p&gt;
    
    </summary>
    
      <category term="summary" scheme="http://mechanicianw.github.io/categories/summary/"/>
    
    
  </entry>
  
  <entry>
    <title>《Pragmatic Programmer》</title>
    <link href="http://mechanicianw.github.io/2017/09/15/reading-pragmatic-programmer/"/>
    <id>http://mechanicianw.github.io/2017/09/15/reading-pragmatic-programmer/</id>
    <published>2017-09-15T15:32:00.000Z</published>
    <updated>2017-11-19T04:21:06.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=140159398,1086926125&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/5387402/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;豆瓣地址&lt;/a&gt;&lt;br&gt;这本书的中文版被翻译为《程序员修炼之道——从小工到专家》，看起来有点中二，其实原名直译《注重实效的程序员》就很合适了。&lt;br&gt;定位于给初级开发人员阅读，涉及到软件工程开发的方方面面，摒弃平时所关注的语言特性，技术细节，而是高屋建瓴，着眼于正确的软件设计方法和应该具备的软件工程意识。（也是一个机会了解行业术语与典故）&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、工程意识&quot;&gt;&lt;a href=&quot;#一、工程意识&quot; class=&quot;headerlink&quot; title=&quot;一、工程意识&quot;&gt;&lt;/a&gt;一、工程意识&lt;/h3&gt;&lt;p&gt;① &lt;code&gt;Don&amp;#39;t Live with Broken Windows: 不要容忍破窗户&lt;/code&gt;&lt;br&gt;这其实就是所说的“破窗理论”，破窗户（低劣的设计，糟糕的代码，临时凑合出的可以 work 的奇怪 hack function）具有传染性，只会导致项目中破窗户越来越多，一堆临时的 hack 修补引起连环问题，直到难以修复，程序崩溃。&lt;br&gt;熵增定律告诉我们，一个封闭系统总是趋向于熵增，也就是系统的无序程度只会不断增加。软件开发中也是如此，不要容忍破窗户，尽快修复任何已察觉到的问题。&lt;/p&gt;
&lt;p&gt;② &lt;code&gt;DRY - Don&amp;#39;t Repeat Yourself 不要重复你自己&lt;/code&gt;&lt;br&gt;   &lt;code&gt;Make It Easy to Reuse 让复用变得容易&lt;/code&gt;&lt;br&gt;   &lt;code&gt;There Are No Final Decisions 不存在最终决策&lt;/code&gt;&lt;br&gt;也是非常有名的 &lt;code&gt;DRY&lt;/code&gt; 原则，与在《重构》与《设计模式》中学习到的类似，应使得我们的程序更&lt;br&gt;介绍了几种可能出现重复的场景，应使得程序具有正交性，不仅出于好维护的目的，也为了避免由于需求变更而扩展性不够导致需要重写。（从这里看来软件开发的常见问题这么多年都没啥变化）&lt;br&gt;要警惕自己出于懒惰而做的 Copy&amp;amp;Paste，它不仅对项目没什么好处，也是一种“恶劣习惯”的开始。&lt;br&gt;维持代码正交性的方法（其实也是重构原则）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让你的代码保持解耦：&lt;code&gt;Law of Demeter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;避免使用全局数据&lt;/li&gt;
&lt;li&gt;避免编写相似的函数：可以通过策略模式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;③ &lt;code&gt;Estimate to Avoid Superises: 估算，以避免发生意外&lt;/code&gt;&lt;br&gt;   &lt;code&gt;Iterate the Schedule with the Code: 通过代码对进度表进行迭代&lt;/code&gt;&lt;br&gt;书中提到“使用的时间单位会对结果的解读造成影响”，并由此提到了相应的建议估算单位，这个还是很有意思的:&lt;br&gt;&lt;img src=&quot;https://file.sankuai.com/pan/im/1/image/AQhd2cqjdxpb_PAKXwAAElX88ApY@640w_1l?t=b&amp;amp;w=640&amp;amp;h=222&quot; alt=&quot;estimate&quot;&gt;&lt;/p&gt;
&lt;p&gt;这只算一些估算经验，真正想进行准确有效的估算，还是要不断复盘检测，建立自己的系统模型，组织开发中所用的步骤，进行合理的模块划分来估算项目进度。&lt;/p&gt;
&lt;p&gt;④ &lt;code&gt;Keep Knowledge in Plain Text: 用纯文本保存知识&lt;/code&gt;&lt;br&gt;   &lt;code&gt;Configure, Don&amp;#39;t Integrate: 要配置，不要集成&lt;/code&gt;&lt;br&gt;   &lt;code&gt;Put Abstractions in Code, Details in Metdata: 将抽象放进代码，细节放进元数据&lt;/code&gt;&lt;br&gt;这里提到了使耦合减少至最少的一个方法，使用 &lt;code&gt;Metadata&lt;/code&gt; 元数据，让我们的系统变得高度可配置。元数据是关于数据的数据，比如说数据库 &lt;code&gt;schema&lt;/code&gt;，对字段进行描述。&lt;br&gt;通过以声明方式思考，由元数据驱动的应用将迫使我们解除设计耦合，推迟细节处理并大大提到了可复用性，能快速响应由需求变更导致的改动。&lt;/p&gt;
&lt;p&gt;⑤ &lt;code&gt;Don&amp;#39;t Program by Coincidence 不要靠巧合编程&lt;/code&gt;&lt;br&gt;这是一个很简单也显而易见的事，然而还是会经常出现“好不容易跑起来了，哪都不要动，先这样吧”。不仅如此，很多时候也是会不经意地忽略这件事，需要警惕，此时能实现很可能是由于正处于边界条件，只是偶然。&lt;br&gt;因此不仅要用 case 测试我们的代码，还要对测试 case 进行深思，通过一些覆盖不全、偶然情况的 case 并不意味着代码是 OK 的。&lt;/p&gt;
&lt;h3 id=&quot;二、开始实际的开发&quot;&gt;&lt;a href=&quot;#二、开始实际的开发&quot; class=&quot;headerlink&quot; title=&quot;二、开始实际的开发&quot;&gt;&lt;/a&gt;二、开始实际的开发&lt;/h3&gt;&lt;p&gt;① &lt;code&gt;Estimate the Order of Your Algorithms 算法速率&lt;/code&gt;&lt;br&gt;书中也简单介绍了 &lt;code&gt;大O表示法&lt;/code&gt; 与一些常见算法的复杂度。在这里要牢记，要根据实际情况做出选择，过度追求算法上的优化而增加了测试维护的成本得不偿失。&lt;/p&gt;
&lt;p&gt;② &lt;code&gt;Don&amp;#39;t Gather Requirement - Dig for Them 不要搜集需求——挖掘它们&lt;/code&gt;&lt;br&gt;&lt;code&gt;Abstractions Live Longer than Details 抽象比细节活得更长久&lt;/code&gt;&lt;br&gt;要对需求敏感，不假思索完全按照 PM 提过来的需求描述进行开发，可能会导致项目中的代码扩展性不好。举个例子，“只有人事部门可以查看档案”与“只有指定人员才能查看员工档案”这就是两个不一样的概念。完全按照前者来开发，很有可能只是将人事部门的组织id写入代码，而后者意味着我们可能需要做一个权限服务而与业务逻辑分离。&lt;/p&gt;
&lt;p&gt;因此，应该 &lt;strong&gt;把政策的文档与需求的文档分开，使需求称为一般陈述，并把政策信息作为例子发给开发者，作为在具体视线中需要支持的一个 Case，最后政策可以称为应用中的元数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;找出用户为何要做特定事情的&lt;code&gt;起因&lt;/code&gt;，而不只是他们目前做这件事的&lt;code&gt;方式&lt;/code&gt;。因为作为开发者是要解决用户的商业问题，而不只是满足用户陈述的需求，解决需求的方式是很有可能发生变化的，而深入挖掘到要解决的根本问题，才是可以使得系统高效，开发人员也不必为需求疲于奔命的解决方式。&lt;/p&gt;
&lt;p&gt;在编写我们开发人员自己使用、查阅的需求文档时，应注重&lt;code&gt;保持抽象&lt;/code&gt;，在涉及需求的地方，最简单的，能够准确地反映商业需要的陈述才是最好的，必须把&lt;code&gt;底层的语义不变项&lt;/code&gt;当做需求进行捕捉。如上个例子，控制可以查看档案的权限，即是语义不变项。&lt;/p&gt;
&lt;p&gt;③ &lt;code&gt;Listen to Nagging Doubts -Start When You&amp;#39;re Ready 等你准备好再开始&lt;/code&gt;&lt;br&gt;这里讨论了“启动恐惧症”，这件事我也经常遇到，但是并没有反思在什么情况下会出现启动恐惧症，每次都是拖延许久最后在无限抵触和焦虑中把项目赶完了。&lt;/p&gt;
&lt;p&gt;书中提出应该注意到自己的疑虑，在长时间的积累后，我们的直觉也会很有用处。除此之外，如果我们发现这种疑虑只是出于拖延的话，应该 &lt;strong&gt;选择一个你觉得会有困难的地方，开始进行某种“概念验证”&lt;/strong&gt;，这样可以有效快速地使启动起来了，因为行动结果无非有两种，一种是我们发现，这个困难可以解决然后就可以消除疑虑正式投入开发，另一种我们发现这个地方确实有问题，然后通过求助外界或者更改需求来推进它，总之项目是有了一个不小的进展。&lt;/p&gt;
&lt;p&gt;上述只是记了一些我在阅读中感触比较多的地方，实际上这本书虽然是一个蛮远久的“名著”，其中概念都很经典并不过时，书中每页都有启示。还是希望我在实习期就有机会看到这本书的，现在开始也并不晚，并且应该多回顾，随着开发经验的增多应该收获也会越来越多。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=140159398,1086926125&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/5387402/&quot;&gt;豆瓣地址&lt;/a&gt;&lt;br&gt;这本书的中文版被翻译为《程序员修炼之道——从小工到专家》，看起来有点中二，其实原名直译《注重实效的程序员》就很合适了。&lt;br&gt;定位于给初级开发人员阅读，涉及到软件工程开发的方方面面，摒弃平时所关注的语言特性，技术细节，而是高屋建瓴，着眼于正确的软件设计方法和应该具备的软件工程意识。（也是一个机会了解行业术语与典故）&lt;br&gt;
    
    </summary>
    
      <category term="programmer reading" scheme="http://mechanicianw.github.io/categories/programmer-reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Make Shell/Git Better</title>
    <link href="http://mechanicianw.github.io/2017/09/15/make-shell-and-git-better/"/>
    <id>http://mechanicianw.github.io/2017/09/15/make-shell-and-git-better/</id>
    <published>2017-09-15T09:43:00.000Z</published>
    <updated>2017-09-15T16:01:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-起手式-oh-my-zsh&quot;&gt;&lt;a href=&quot;#1-起手式-oh-my-zsh&quot; class=&quot;headerlink&quot; title=&quot;1.起手式 oh-my-zsh&quot;&gt;&lt;/a&gt;1.起手式 oh-my-zsh&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5c385f15f3eaedb72cfcfbbaf75355b700ac0757/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6f686d797a73682f6f682d6d792d7a73682d6c6f676f2e706e67&quot; alt=&quot;oh-my-zsh&quot;&gt;&lt;/p&gt;
&lt;p&gt;zsh 被称作是最强大的 shell，而 oh-my-zsh 则是最流行的 zsh 配置文件，提供了丰富的主题以及大量插件，极大地扩展了 zsh 的功能。&lt;br&gt;可以无脑引入，便得到了最基本又好用的文件夹跳转，路径、命令、参数补全等便利操作。&lt;br&gt;推荐 plugin: git, &lt;a href=&quot;https://github.com/wting/autojump/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;autojump&lt;/a&gt;, &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/osx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;osx&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-优化你的-Git&quot;&gt;&lt;a href=&quot;#2-优化你的-Git&quot; class=&quot;headerlink&quot; title=&quot;2.优化你的 Git&quot;&gt;&lt;/a&gt;2.优化你的 Git&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;① 美化 diff&lt;/strong&gt;&lt;br&gt;Git 自己的 git diff 还是蛮不好用也不好看的，文件名和 diff 内容不太好定位。&lt;br&gt;基于 &lt;a href=&quot;https://github.com/so-fancy/diff-so-fancy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;diff-so-fancy&lt;/a&gt; 我们可以做一些美化工作。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install diff-so-fancy -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在 &lt;code&gt;~/.gitconfig&lt;/code&gt; 文件中编辑&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[alias]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  d = &amp;quot;!f() &amp;#123; [ -z \&amp;quot;$GIT_PREFIX\&amp;quot; ] || cd \&amp;quot;$GIT_PREFIX\&amp;quot; &amp;amp;&amp;amp; git diff --color \&amp;quot;$@\&amp;quot; | diff-so-fancy  | less --tabs=4 -    RFX; &amp;#125;; f&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以参考 &lt;code&gt;diff-so-fancy&lt;/code&gt; 中的推荐颜色做配置，然后通过 &lt;code&gt;git d&lt;/code&gt; 命令就可以看到优化过的 diff 信息了&lt;br&gt;（git diff VS git d）&lt;br&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/39191/13622719/7cc7c54c-e555-11e5-86c4-7045d91af041.png&quot; alt=&quot;diff&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;② 美化 log&lt;/strong&gt;&lt;br&gt;git log 打出来的日志结构是完全扁平的，信息也不够全，依然是很难一眼找到自己想要的信息&lt;br&gt;依然是在 &lt;code&gt;~/.gitconfig&lt;/code&gt; 中编辑：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[alias]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;lg = log --graph --abbrev-commit --decorate --format=format:&amp;apos;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset)     %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)&amp;apos; --all&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样信息清晰好看了很多，也可以看到每个提交所在的分支及其分化衍合的情况&lt;br&gt;(git log VS git lg)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/6E897688-D526-4DC5-A373-05FB41734A91.png&quot; alt=&quot;log&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/84B43431-AB74-446F-8442-3DFCD8E8E8BE.png&quot; alt=&quot;lg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;③ 命令加强 &lt;a href=&quot;https://github.com/tj/git-extras&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-extras&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;TJ出品的 git 命令扩展集，应有尽有，要啥有啥，按需取用&lt;/p&gt;
&lt;h2 id=&quot;3-终端复用神器-Tmux&quot;&gt;&lt;a href=&quot;#3-终端复用神器-Tmux&quot; class=&quot;headerlink&quot; title=&quot;3.终端复用神器 Tmux&quot;&gt;&lt;/a&gt;3.终端复用神器 Tmux&lt;/h2&gt;&lt;p&gt;Tmux 是 Linux 中一种管理窗口的程序，用 Tmux 的主要原因是它提供了一个窗体组随时存储和恢复的功能。&lt;br&gt;现在我们经常在开发时给一个项目起很多 server，webpack server 占一个 tab，mock server 占一个 tab，开的时候开半天，哪个断了还要挨个找。&lt;br&gt;或者，在用 SSH 登录远程服务器进行调试时，开了N多窗口，过了一会儿发现 &lt;code&gt;Broken Pipe&lt;/code&gt; 管子裂了，又得重来。&lt;br&gt;Tmux 可以帮助我们 split 窗口以及进行终端复用保证工作现场不丢失。&lt;br&gt;&lt;a href=&quot;http://cenalulu.github.io/linux/tmux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用与安装方法&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-给命令行使用的代理工具-proxychains-ng&quot;&gt;&lt;a href=&quot;#4-给命令行使用的代理工具-proxychains-ng&quot; class=&quot;headerlink&quot; title=&quot;4.给命令行使用的代理工具 proxychains-ng&quot;&gt;&lt;/a&gt;4.给命令行使用的代理工具 &lt;a href=&quot;https://github.com/rofl0r/proxychains-ng&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;proxychains-ng&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用公司的 mnpm 镜像其实就基本不需要这个了。&lt;br&gt;自己搭服务器或者在家里办公有需求的话可以用。&lt;/p&gt;
&lt;h2 id=&quot;5-commit-message-规范工具-commitizen&quot;&gt;&lt;a href=&quot;#5-commit-message-规范工具-commitizen&quot; class=&quot;headerlink&quot; title=&quot;5. commit message 规范工具 commitizen&quot;&gt;&lt;/a&gt;5. commit message 规范工具 &lt;a href=&quot;https://github.com/commitizen/cz-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitizen&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;制定 Code Review 规范时看到了 &lt;a href=&quot;https://eggjs.org/zh-cn/contributing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Egg.js 的代码贡献规范&lt;/a&gt;&lt;br&gt;其中总结了一条好的，有意义的 commit message 应该包含：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;① type: 本次 commit 的类型(feat/fix/stype/perf….)&lt;br&gt;② scope: 改动范围&lt;br&gt;③ subject: 简要概述本次提交做了什么&lt;br&gt;④ body: 补充 subject, 可以不写&lt;br&gt;⑤ footer: 本次提交关联的 issue, task&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手动按这个写还挺累挺难的，因此决定在团队中推行使用 commitizen&lt;br&gt;简单好用，立竿见影&lt;br&gt;&lt;img src=&quot;https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png&quot; alt=&quot;commitizen&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-好玩的-thefuck&quot;&gt;&lt;a href=&quot;#6-好玩的-thefuck&quot; class=&quot;headerlink&quot; title=&quot;6.好玩的 thefuck&quot;&gt;&lt;/a&gt;6.好玩的 &lt;a href=&quot;https://github.com/nvbn/thefuck&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;thefuck&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nvbn/thefuck/master/example.gif&quot; alt=&quot;thefuck&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个好玩的小工具，给开发添点乐趣。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-起手式-oh-my-zsh&quot;&gt;&lt;a href=&quot;#1-起手式-oh-my-zsh&quot; class=&quot;headerlink&quot; title=&quot;1.起手式 oh-my-zsh&quot;&gt;&lt;/a&gt;1.起手式 oh-my-zsh&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5c385f15f3eaedb72cfcfbbaf75355b700ac0757/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6f686d797a73682f6f682d6d792d7a73682d6c6f676f2e706e67&quot; alt=&quot;oh-my-zsh&quot;&gt;&lt;/p&gt;
&lt;p&gt;zsh 被称作是最强大的 shell，而 oh-my-zsh 则是最流行的 zsh 配置文件，提供了丰富的主题以及大量插件，极大地扩展了 zsh 的功能。&lt;br&gt;可以无脑引入，便得到了最基本又好用的文件夹跳转，路径、命令、参数补全等便利操作。&lt;br&gt;推荐 plugin: git, &lt;a href=&quot;https://github.com/wting/autojump/wiki&quot;&gt;autojump&lt;/a&gt;, &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/osx&quot;&gt;osx&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-优化你的-Git&quot;&gt;&lt;a href=&quot;#2-优化你的-Git&quot; class=&quot;headerlink&quot; title=&quot;2.优化你的 Git&quot;&gt;&lt;/a&gt;2.优化你的 Git&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;① 美化 diff&lt;/strong&gt;&lt;br&gt;Git 自己的 git diff 还是蛮不好用也不好看的，文件名和 diff 内容不太好定位。&lt;br&gt;基于 &lt;a href=&quot;https://github.com/so-fancy/diff-so-fancy&quot;&gt;diff-so-fancy&lt;/a&gt; 我们可以做一些美化工作。&lt;/p&gt;
    
    </summary>
    
      <category term="shell git linux" scheme="http://mechanicianw.github.io/categories/shell-git-linux/"/>
    
    
  </entry>
  
  <entry>
    <title>解决中文拼音输入法在input监听的问题</title>
    <link href="http://mechanicianw.github.io/2017/08/22/fix-chinese-input-listener/"/>
    <id>http://mechanicianw.github.io/2017/08/22/fix-chinese-input-listener/</id>
    <published>2017-08-22T12:16:00.000Z</published>
    <updated>2017-11-19T06:48:27.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、问题&quot;&gt;&lt;a href=&quot;#一、问题&quot; class=&quot;headerlink&quot; title=&quot;一、问题&quot;&gt;&lt;/a&gt;一、问题&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/chinese-pinyin.gif&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;在通过监听用户输入，将输入作为 Keyword 进行查询时（做了防抖）发现有如图问题，使用中文拼音输入法时，未选中所要的字词前，会自动将输入法分词过的拼音作为文本，由于实时监听输入，就存在将 ce’shi 作为 keyword 查询的问题了。&lt;br&gt;在这里，前端需要对拼音输入法的这种情况进行处理。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;二、TL-DR-解决方法&quot;&gt;&lt;a href=&quot;#二、TL-DR-解决方法&quot; class=&quot;headerlink&quot; title=&quot;二、TL;DR 解决方法&quot;&gt;&lt;/a&gt;二、TL;DR 解决方法&lt;/h3&gt;&lt;p&gt;可以借鉴 &lt;code&gt;Vue.js&lt;/code&gt; 的处理方法，引入 &lt;code&gt;compositionstart&lt;/code&gt; 和 &lt;code&gt;compositionend&lt;/code&gt; 事件来捕获 &lt;code&gt;IME(input method editor)&lt;/code&gt; 的启动和关闭。&lt;br&gt;这两个事件，目前是IE9+支持，移动端 Safari &amp;lt; 10.2 &amp;amp; UIWebView 暂时无法触发，因此可以作为 PC 端产品的靠谱方案。&lt;br&gt;实现：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; node = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;._orgtree&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fireLock = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  node.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;compositionstart&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      fireLock = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  node.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;compositionend&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      fireLock = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  node.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fireLock) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          searchOrgTree();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;三、怎么更放心地用&quot;&gt;&lt;a href=&quot;#三、怎么更放心地用&quot; class=&quot;headerlink&quot; title=&quot;三、怎么更放心地用&quot;&gt;&lt;/a&gt;三、怎么更放心地用&lt;/h3&gt;&lt;p&gt;这里还是看看 Vue.js 的代码：&lt;a href=&quot;https://github.com/vuejs/vue/blob/c90b140e80f1bd5d01c733a5bd9fa6e9cb3c2b4d/src/platforms/web/runtime/directives/model.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;src/platforms/web/runtime/directives/model.js&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 只贴我们用到的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  inserted (el, binding, vnode) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (vnode.tag === &lt;span class=&quot;string&quot;&gt;&#39;textarea&#39;&lt;/span&gt; || isTextInputType(el.type)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!binding.modifiers.lazy) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Safari &amp;lt; 10.2 &amp;amp; UIWebView doesn&#39;t fire compositionend when&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// switching focus before confirming composition choice&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// this also fixes the issue where some browsers e.g. iOS Chrome&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        el.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;change&#39;&lt;/span&gt;, onCompositionEnd)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!isAndroid) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          el.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;compositionstart&#39;&lt;/span&gt;, onCompositionStart)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          el.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;compositionend&#39;&lt;/span&gt;, onCompositionEnd)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompositionStart&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  e.target.composing = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompositionEnd&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// prevent triggering an input event for no reason&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!e.target.composing) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  e.target.composing = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  trigger(e.target, &lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;trigger&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;el, type&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; e = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createEvent(&lt;span class=&quot;string&quot;&gt;&#39;HTMLEvents&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  e.initEvent(type, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  el.dispatchEvent(e)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;For languages that require an IME (Chinese, Japanese, Korean etc.), you’ll notice that v-model doesn’t get updated during IME composition. If you want to cater for these updates as well, use input event instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vue.js 在编写 &lt;code&gt;v-model&lt;/code&gt; 这一核心指令时用到了 &lt;code&gt;compositionstart&lt;/code&gt; 和 &lt;code&gt;compositionend&lt;/code&gt;  这两个事件，保证在输入框交互过程中的文本并不会触发 &lt;code&gt;v-model&lt;/code&gt; 更新，在源码中也是针对 Safari 做了兼容处理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、问题&quot;&gt;&lt;a href=&quot;#一、问题&quot; class=&quot;headerlink&quot; title=&quot;一、问题&quot;&gt;&lt;/a&gt;一、问题&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/chinese-pinyin.gif&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;在通过监听用户输入，将输入作为 Keyword 进行查询时（做了防抖）发现有如图问题，使用中文拼音输入法时，未选中所要的字词前，会自动将输入法分词过的拼音作为文本，由于实时监听输入，就存在将 ce’shi 作为 keyword 查询的问题了。&lt;br&gt;在这里，前端需要对拼音输入法的这种情况进行处理。&lt;br&gt;
    
    </summary>
    
      <category term="front-end javascript" scheme="http://mechanicianw.github.io/categories/front-end-javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>You Don&#39;t Know setTimeout</title>
    <link href="http://mechanicianw.github.io/2017/06/04/from-settimeout-to-event-loop/"/>
    <id>http://mechanicianw.github.io/2017/06/04/from-settimeout-to-event-loop/</id>
    <published>2017-06-04T13:15:00.000Z</published>
    <updated>2017-11-19T06:49:28.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/jstips-animation.gif&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;几个可能不知道的定时器⏲特性&quot;&gt;&lt;a href=&quot;#几个可能不知道的定时器⏲特性&quot; class=&quot;headerlink&quot; title=&quot;几个可能不知道的定时器⏲特性&quot;&gt;&lt;/a&gt;几个可能不知道的定时器⏲特性&lt;/h3&gt;&lt;p&gt;首先，&lt;strong&gt;setTimeout()/setInterval()&lt;/strong&gt; 方法不是 ECMAScript 规范定义的内容，而是属于 BOM 提供的功能，也就是说定时器作为 BOM 对象和方法的一部分才能在浏览器中使用。&lt;/p&gt;
&lt;p&gt;需要注意的是 &lt;strong&gt;setTimeout() 与 setInterval() 在触发周期的定义上完全不一样&lt;/strong&gt;，在下面例子 setTimeout() 代码中，要在前一个 callback 回调执行结束并延迟 10ms 以后才能再次执行 setTimeout()，即延迟是要求运行时(runtime) 处理请求所需的最小时间，但不是有所保证的时间。而 setInterval() 则是每隔 10ms 就执行一次 callback 回调，不会关注 callback 何时执行结束。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 由于触发周期定义不同，以下两个定时器有非常大的区别&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义一个 timeout 定时器，每10毫秒重新调用自己&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;repeatMe&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(repeatMe, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义一个 interval 定时器，每10毫秒触发一次&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此之外，在 &lt;a href=&quot;https://html.spec.whatwg.org/multipage/webappapis.html#timers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML spec&lt;/a&gt; 中定义 &lt;strong&gt;setTimeout 的最小延迟时间是4ms&lt;/strong&gt;，但通常认为浏览器可实现的定时器的最小延迟时间是10ms，即 setTimeout(fn, 0) 也是会延迟至少10ms，如果想实现 0 delay 的话可以通过 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;window.postMessage&lt;/a&gt; 实现。&lt;/p&gt;
&lt;p&gt;定时器还有一个小特性，在开发移动公告的滚动动画时发现，从动画所在的 tab 页切换到别的 tab 之后再切回，动画会完全乱掉，并不会按代码中所设置的延迟时间进行。这是为了减少背景 tab 页面的代码运行消耗（电量），&lt;strong&gt;背景 tab 页面中定时器的间隔会增加到1000ms&lt;/strong&gt;，如果遇到需要解决这个问题的场景，可以通过 &lt;a href=&quot;https://robertnyman.com/2010/03/25/using-html5-web-workers-to-have-background-computational-power/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 Web Workers&lt;/a&gt; 或者用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;requestAnimationFrame&lt;/a&gt; 代替定时器来解决。&lt;/p&gt;
&lt;p&gt;最后，由于 webkit 中 timer 类的实现原理决定：&lt;strong&gt;预期延时时间最小的任务最先被执行，同时，预期延时时间相同的两个任务，其执行顺序是按照注册的先后顺序执行。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; start = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;fn1&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;fn2&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;another fn2&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;fn3&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;start while&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt; - start &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;end while&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印结果如下&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// start while&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// end while&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// fn3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// fn1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// fn2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// another fn2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Event-Loop-相关概念&quot;&gt;&lt;a href=&quot;#Event-Loop-相关概念&quot; class=&quot;headerlink&quot; title=&quot;Event Loop 相关概念&quot;&gt;&lt;/a&gt;Event Loop 相关概念&lt;/h3&gt;&lt;p&gt;浏览器让一个单线程共用于解释和执行 JavaScript，我们可以将它称为是“主线程”。其它的处理AJAX请求的线程、处理DOM事件的线程、定时器线程等等可以称为是“工作线程”。&lt;/p&gt;
&lt;p&gt;JavaScript 的单线程意味着只有一个 call stack，也意味着同一时间是能做一件事。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/v2-25076e938167ad11c6a2a9ec099e0973_b.png&quot; alt=&quot;Event Loop&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调用栈(call stack): 后进先出，函数被调用时会被加入到调用栈顶部，等执行结束再从顶部移除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;堆(heap): 内存分配区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息队列(quene): 也叫任务队列。先进先出，一旦调用栈中的所有任务执行完毕，栈清空，就会读取消息队列。&lt;strong&gt;消息/任务就是注册异步任务时添加的回调函数&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步任务: 在主线程的调用栈排队执行的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异步任务: 主线程发起执行异步函数的请求，对应的工作线程（浏览器事件触发线程、异步http请求线程等）接收请求并告知主线程已收到(异步函数返回)；主线程可以继续执行后面的代码，同时工作线程执行异步任务；工作线程完成工作后，将完成消息放到消息队列，主线程通过事件循环过程去取消息，然后执行回调。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事件循环(event loop): 事件循环是指主线程重复从消息队列中取消息、执行的过程。&lt;strong&gt;&lt;br&gt;取一个消息并执行的过程叫做一次循环&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web APIs: 如 AJAX，定时器，DOM事件这些异步事务并不在 V8(JavaScript)运行环境中，是由浏览器提供的 Web API&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关概念就是这些，&lt;a href=&quot;http://latentflip.com/loupe/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://latentflip.com/loupe/&lt;/a&gt; 是一个可视化调用栈的网站，可以把自己的代码敲到里面运行来看 event loop 的具体动态。&lt;/p&gt;
&lt;h3 id=&quot;定时器和线程是如何工作的&quot;&gt;&lt;a href=&quot;#定时器和线程是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;定时器和线程是如何工作的&quot;&gt;&lt;/a&gt;定时器和线程是如何工作的&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://johnresig.com/files/Timers.png&quot; alt=&quot;timer&quot;&gt;&lt;/p&gt;
&lt;p&gt;以此图为例，来理解 JavaScript 中异步事件的执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0ms: 启动即执行第一段 JavaScript 代码块，启动一个10ms延迟定时器(timeout)和10ms间隔定时器(interval)，延迟定时器是先于间隔定时器声明启动的。&lt;/p&gt;
&lt;p&gt;5ms: 鼠标单击，但是由于现在正在执行第一个代码块，调用栈不为空，单击事件的处理函数不能立即执行，只能在消息队列中进行排队&lt;/p&gt;
&lt;p&gt;10ms: 延迟定时器触发，间隔定时器触发，同理也都进行排队&lt;/p&gt;
&lt;p&gt;18ms: 第一段代码块执行结束，调用栈为空，此时有三个代码块在排队执行(click 事件处理函数，延迟定时器处理函数，间隔定时器第一次触发的处理函数)，按顺序此时主线程中执行 click 事件回调。消息队列中此时还有两个回调。&lt;/p&gt;
&lt;p&gt;20ms: 间隔定时器又触发了，由于间隔定时器第一次触发的处理函数仍在排队，浏览器不会对同一 interval 处理函数的多个实例同时进行排队，于是此次调用作废，消息队列不变，仍然还是那两个回调。&lt;/p&gt;
&lt;p&gt;28ms: click 事件回调函数执行完毕，按顺序，此时主线程中将执行延时定时器处理函数。消息队列中只有间隔定时器的第一次触发回调在排队。&lt;/p&gt;
&lt;p&gt;30ms: 间隔定时器再一次触发了，仍然因为第一次触发的回调仍在排队，此次调用作废。&lt;/p&gt;
&lt;p&gt;34ms: 延时定时器回调函数执行完毕。开始执行间隔定时器第一次触发的回调函数。此时消息队列为空。&lt;/p&gt;
&lt;p&gt;40ms: 间隔定时器再一次触发了，导致新的 interval 回调函数进入消息队列中排队。&lt;/p&gt;
&lt;p&gt;42ms: 间隔定时器第一次回调函数执行完毕，正在排队的回调开始执行。消息队列再次为空。&lt;/p&gt;
&lt;p&gt;47ms: 回调执行完毕，此时还没有到触发 interval 的时间，因此下一个 interval 回调可以等到触发事件立即执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此，我们可以知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果无法立即执行定时器，该定时器会被推迟到下一个可用的执行时间点上(验证了实际延迟时间必然会比指定的延迟时间更长)&lt;/li&gt;
&lt;li&gt;同一个 interval 执行程序的多个实例不能同时进行排队&lt;/li&gt;
&lt;li&gt;延迟时间足够长的话，很有可能会有两个 interval 回调会无延迟连续执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;setTimeout-fn-0&quot;&gt;&lt;a href=&quot;#setTimeout-fn-0&quot; class=&quot;headerlink&quot; title=&quot;setTimeout(fn, 0)&quot;&gt;&lt;/a&gt;setTimeout(fn, 0)&lt;/h3&gt;&lt;p&gt;由上述内容可知，setTimeout(fn, 0) 中的代码并不是为了 fn 立即执行，而是将 fn 插入到消息队列，使得待调用栈为空时将立即调用执行 fn，保证了 fn 的后执行。因此我们可以通过这一特性，&lt;strong&gt;用 setTimeout(fn, 0) 调整事件的发生顺序&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; input = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;input[type=button]&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;input.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    input.value +=&lt;span class=&quot;string&quot;&gt;&#39; input&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  input.value += &lt;span class=&quot;string&quot;&gt;&#39; body&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 模拟事件捕获，实现父元素的事件回调函数先发生&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在《高性能JavaScript》中认为 &lt;strong&gt;单个 JavaScript 操作花费的总时间不应该超过100毫秒&lt;/strong&gt;。否则用户会感到与界面失去联系。实际上，如果一段 js 代码的运行时间超过 500ms，Firefox 和 Opera 浏览器将弹出警告对话框，Safari 会默认终止运行时间超过500 ms 的脚本。因此我们需要定时器将计算量大耗时长的任务分割成不会让浏览器挂掉的碎片。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; div = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 会造成浏览器阻塞&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0xA00000&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;0xFFFFFF&lt;/span&gt;;i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  div.style.backgroundColor = &lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt;+i.toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 分割成小的任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0x100000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  timer = setTimeout(func, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  div.style.backgroundColor = &lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt;+i.toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i++ == &lt;span class=&quot;number&quot;&gt;0xFFFFFF&lt;/span&gt;) clearInterval(timer);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;timer = setTimeout(func, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;定时器的其它应用&quot;&gt;&lt;a href=&quot;#定时器的其它应用&quot; class=&quot;headerlink&quot; title=&quot;定时器的其它应用&quot;&gt;&lt;/a&gt;定时器的其它应用&lt;/h3&gt;&lt;p&gt;这里就是说函数节流(throttle)与函数防抖(debounce)&lt;/p&gt;
&lt;p&gt;以 Underscore.js 中 debounce 的实现为例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param  &amp;#123;function&amp;#125; func        传入函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param  &amp;#123;number&amp;#125;   wait        表示时间窗口的间隔&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param  &amp;#123;boolean&amp;#125;  immediate   设置为ture时，调用触发于开始边界而不是结束边界&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @return &amp;#123;function&amp;#125;             返回调用函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_.debounce = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;func, wait, immediate&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeout, args, context, timestamp, result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; later = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置 last 为当前时间与上次触发的时间间隔&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; last = _.now() - timestamp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (last &amp;lt; wait &amp;amp;&amp;amp; last &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 如果时间间隔小于所传入的 wait&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 还没到触发时间，继续设置定时器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      timeout = setTimeout(later, wait - last);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 到了触发时间，清空计时器，避免影响下次触发&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      timeout = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!immediate) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 执行 func&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result = func.apply(context, args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!timeout) context = args = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    context = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    args = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 每次触发之后 更新时间戳为此次触发时间&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    timestamp = _.now();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断是否符合立即触发的条件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; callNow = immediate &amp;amp;&amp;amp; !timeout;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果延时不存在，重新设定延时&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!timeout) timeout = setTimeout(later, wait);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (callNow) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 立即触发&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      result = func.apply(context, args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      context = args = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，&lt;strong&gt;管理多个定时器会产生许多问题，同时创建大量的定时器将会在浏览器中增加垃圾回收任务发生的可能性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;定时器是一个特殊的垃圾回收问题，这是由于它们是在 JavaScript 主线程之外的浏览器线程进行管理的。不同浏览器垃圾回收的周期不同，这也是通过定时器处理动画时，动画在有的浏览器上很流畅，有的浏览器上特别卡的原因之一。因此应该注意减少同时使用的定时器的数量或者使用中央定时器来管理多个回调。&lt;/p&gt;
&lt;h3 id=&quot;几个后续值得探究的问题&quot;&gt;&lt;a href=&quot;#几个后续值得探究的问题&quot; class=&quot;headerlink&quot; title=&quot;几个后续值得探究的问题&quot;&gt;&lt;/a&gt;几个后续值得探究的问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTML5 Web Workers: HTML5标准的一部分，这一规范定义了一套 API，它允许一段JavaScript程序运行在主线程之外的另外一个线程中&lt;/li&gt;
&lt;li&gt;requestAnimationFrame: 更适合动画使用的“定时循环器”&lt;/li&gt;
&lt;li&gt;setImmediate: 一个比较新的定时器，setTimeout(0)的替代版&lt;/li&gt;
&lt;li&gt;Node.js 中的 Event Loop&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&amp;amp;t=669s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Philip Roberts: What the heck is the event loop anyway&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://johnresig.com/blog/how-javascript-timers-work/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;John Resig: How JavaScript Timers Work&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.alloyteam.com/2015/10/turning-to-javascript-series-from-settimeout-said-the-event-loop-model/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AlloyTeam: 从 setTimeout 说起事件循环&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/10/event-loop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰: JavaScript 运行机制详解——再谈Event Loop&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/jstips-animation.gif&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;几个可能不知道的定时器⏲特性&quot;&gt;&lt;a href=&quot;#几个可能不知道的定时器⏲特性&quot; class=&quot;headerlink&quot; title=&quot;几个可能不知道的定时器⏲特性&quot;&gt;&lt;/a&gt;几个可能不知道的定时器⏲特性&lt;/h3&gt;&lt;p&gt;首先，&lt;strong&gt;setTimeout()/setInterval()&lt;/strong&gt; 方法不是 ECMAScript 规范定义的内容，而是属于 BOM 提供的功能，也就是说定时器作为 BOM 对象和方法的一部分才能在浏览器中使用。&lt;/p&gt;
&lt;p&gt;需要注意的是 &lt;strong&gt;setTimeout() 与 setInterval() 在触发周期的定义上完全不一样&lt;/strong&gt;，在下面例子 setTimeout() 代码中，要在前一个 callback 回调执行结束并延迟 10ms 以后才能再次执行 setTimeout()，即延迟是要求运行时(runtime) 处理请求所需的最小时间，但不是有所保证的时间。而 setInterval() 则是每隔 10ms 就执行一次 callback 回调，不会关注 callback 何时执行结束。&lt;/p&gt;
    
    </summary>
    
      <category term="front-end javascript" scheme="http://mechanicianw.github.io/categories/front-end-javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式以及在 Vue 源码中的实践</title>
    <link href="http://mechanicianw.github.io/2017/03/14/observer-pattern-in-vue/"/>
    <id>http://mechanicianw.github.io/2017/03/14/observer-pattern-in-vue/</id>
    <published>2017-03-14T10:30:00.000Z</published>
    <updated>2017-11-19T06:50:01.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/vue-reactive.jpg&quot; alt=&quot;vue&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 ES6 把 Promise 写进语言标准前，为实现异步编程，经常会采用 &lt;strong&gt;观察者模式（发布-订阅模式）&lt;/strong&gt; 作为替代传递回调函数的方案。&lt;/p&gt;
&lt;p&gt;它定义了一种一对多的关系，让多个观察者订阅同一主题对象，当主题状态发生改变则立即发布，通知所有的订阅者。发布者和订阅者之间完全解耦，仅仅是共享同一自定义事件的名称。当新的订阅者出现，发布者无需做任何修改，反之亦然。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;常见的需要观察者模式的场景：&quot;&gt;&lt;a href=&quot;#常见的需要观察者模式的场景：&quot; class=&quot;headerlink&quot; title=&quot;常见的需要观察者模式的场景：&quot;&gt;&lt;/a&gt;常见的需要观察者模式的场景：&lt;/h2&gt;&lt;p&gt;在任意一个需要登录的网站中，header，navbar，消息列表，购物车等模块的渲染，都需要登陆后拿到用户信息。但是ajax登录请求完成的时间无法确定，如果在ajax回调中调用各模块的方法来更新用户信息的话，耦合性太强，新增/修改模块的成本太高，业务模块更复杂的时候很难维护。这个时候需要的就是观察者模式。&lt;/p&gt;
&lt;p&gt;Vue 在实现数据绑定时也采用的观察者模式来实现数据的订阅，订阅者维护每一次更新之前的数据，当数据发生变化，订阅者将执行自身设定的回调逻辑，并更新所维护数据的值。&lt;/p&gt;
&lt;h2 id=&quot;实现观察者模式：&quot;&gt;&lt;a href=&quot;#实现观察者模式：&quot; class=&quot;headerlink&quot; title=&quot;实现观察者模式：&quot;&gt;&lt;/a&gt;实现观察者模式：&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;指定发布者&lt;/li&gt;
&lt;li&gt;给发布者添加一个缓存列表，用于存放回调函数以通知订阅者&lt;/li&gt;
&lt;li&gt;发布消息时，遍历缓存列表，触发每一个订阅者回调函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;并且除了缓存列表之外，还需要订阅，发布，取消订阅这三个方法。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; event = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 缓存列表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  clientList: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 订阅&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  listen: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key, fn&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clientList[key]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 订阅列表中没有这个 key 则把初始化这个 key 的队列为空&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clientList[key] = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clientList[key].push(fn)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  trigger: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.shift.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fns = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clientList[key]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fns || fns.length === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历缓存列表，挨个触发回调&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, fn; fn = fns[ i++ ];)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      fn.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  remove: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;key, fn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fns = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clientList[key]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fns)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fn)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      fns &amp;amp;&amp;amp; (fns.length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; l = fns.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; l &amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; l--)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _fn = fns[l]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_fn === fn)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          fns.splice(l, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就是观察者模式的一个通用实现。&lt;/p&gt;
&lt;p&gt;在实际场景中，有可能需要多个发布者对象，需要多个类似上面 event 对象的绑定，非常麻烦，发布订阅也并没有完全解耦，需要知道这个对象的名字。因此也可以采用 &lt;strong&gt;全局的 Event 对象&lt;/strong&gt; 来实现。&lt;br&gt;同时，也有可能为了避免命名冲突，需要 &lt;strong&gt;创建命名空间&lt;/strong&gt; ，或者是由于为了实现可以先发布再订阅，&lt;strong&gt;创建离线堆栈&lt;/strong&gt; 等等，可定制高级版的观察者模式。&lt;/p&gt;
&lt;h2 id=&quot;采用观察者模式需要注意的问题：&quot;&gt;&lt;a href=&quot;#采用观察者模式需要注意的问题：&quot; class=&quot;headerlink&quot; title=&quot;采用观察者模式需要注意的问题：&quot;&gt;&lt;/a&gt;采用观察者模式需要注意的问题：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;实现观察者模式本身需要耗费内存，如果发布并不常发生，而订阅却始终存在于内存中，造成了一定程度的浪费&lt;/li&gt;
&lt;li&gt;由于模块之间的联系由具体的耦合转为抽象，因此过多使用观察者模式的话，模块关系很难追溯，代码也很难维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Vue源码中的使用：&quot;&gt;&lt;a href=&quot;#Vue源码中的使用：&quot; class=&quot;headerlink&quot; title=&quot;Vue源码中的使用：&quot;&gt;&lt;/a&gt;Vue源码中的使用：&lt;/h2&gt;&lt;p&gt;Vue 实现数据绑定依靠的是 &lt;strong&gt;Object.defineProperty() 的自定义getter/setter&lt;/strong&gt; 来进行的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 管理，通知订阅者&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义缓存列表，为外部提供 添加订阅/通知订阅者 的接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dep&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 缓存列表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subs = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    addSub(sub)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 添加订阅，即向缓存列表中添加新项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subs.push(sub)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    notify()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 通知所有的订阅者(Watcher)，触发订阅者的相应回调&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subs.forEach((sub) =&amp;gt; sub.update())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 引入订阅管理模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Dep &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Dep&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义订阅&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Watcher&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 接受三个参数，实例，所订阅数据，指定的回调&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(vm, expOrFn, cb)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.vm = vm &lt;span class=&quot;comment&quot;&gt;// 取到 Vue 实例，从而拿到实例上的 data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cb = cb &lt;span class=&quot;comment&quot;&gt;// 数据更新时触发的回调函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.expOrFn = expOrFn &lt;span class=&quot;comment&quot;&gt;// 被订阅的数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.val = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.get() &lt;span class=&quot;comment&quot;&gt;// 赋值为定义订阅时的数据，即更新前的值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 对外暴露的接口，数据更新时发布者将调用这个接口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    update()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.run()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    run()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 订阅数据发生变化时，更新 val ，触发回调&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// val 为当前值， this.val 为更新前的值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; val = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.get()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(val !== &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.val)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.val = val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cb.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.vm)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    get()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 读取所订阅数据的最新值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Dep.target = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; val = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.vm._data[&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.expOrFn]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 指针置空&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Dep.target = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义 Observer 数据监听器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 引入 Dep 订阅管理模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Dep &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Dep&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义 Observer 类，将所监听数据遍历每一项传入到 defineReactive 以加入 get/set 方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observer&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(value)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value = value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.walk(value)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    walk(value)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 遍历所监听对象、数组的每一项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(value).forEach(key =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.convert(key, value[key]))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    convert(key, val)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        defineReactive(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value, key, val)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;defineReactive&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj, key, val&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建新的订阅&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dep = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dep()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 给当前属性的值添加监听&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chlidOb = observe(val)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 加上 get/set&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(obj, key, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 设置为属性可遍历&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        enumerable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 属性可删除，可修改其 emumerable/writable 等属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        get: ()=&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;get value&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Dep.target 为 watcher 实例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 如果存在这个 watcher 则将其加入到 sub 队列&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Watcher实例在实例化过程中，会触发当前get方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(Dep.target)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                dep.addSub(Dep.target)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        set: (newVal) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 如果数据被修改则会触发这段 set 函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;new value seted&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(val === newVal) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            val = newVal&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 监听新值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            chlidOb = observe(newVal)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 通知所有订阅者，数值被改变了&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            dep.notify()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建监听，在调用Observer类的外面加了层判断&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;observe&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 当值不存在，或者不是对象，就不监听了&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!value || &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; value !== &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer(value)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在有些文章中，观察者模式与发布/订阅模式还有些差别，可以观摩这篇 &lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ObserverPattern&lt;/a&gt;去学习一下&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/vue-reactive.jpg&quot; alt=&quot;vue&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 ES6 把 Promise 写进语言标准前，为实现异步编程，经常会采用 &lt;strong&gt;观察者模式（发布-订阅模式）&lt;/strong&gt; 作为替代传递回调函数的方案。&lt;/p&gt;
&lt;p&gt;它定义了一种一对多的关系，让多个观察者订阅同一主题对象，当主题状态发生改变则立即发布，通知所有的订阅者。发布者和订阅者之间完全解耦，仅仅是共享同一自定义事件的名称。当新的订阅者出现，发布者无需做任何修改，反之亦然。&lt;/p&gt;
    
    </summary>
    
      <category term="front-end javascript pattern" scheme="http://mechanicianw.github.io/categories/front-end-javascript-pattern/"/>
    
    
  </entry>
  
  <entry>
    <title>由匿名函数展开的一系列知识点</title>
    <link href="http://mechanicianw.github.io/2016/11/23/basic-review-from-anonymous-function-to-iife/"/>
    <id>http://mechanicianw.github.io/2016/11/23/basic-review-from-anonymous-function-to-iife/</id>
    <published>2016-11-23T14:00:00.000Z</published>
    <updated>2017-11-19T06:50:35.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/iife.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;最近在进行 &lt;a href=&quot;https://github.com/MechanicianW/underscore-analysis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;underscore.js 源码分析&lt;/a&gt;，也顺便看了些别的库的大致封装方式&lt;br&gt;underscore:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; root = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _ = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; _) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; _)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; _(obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._wrapped = obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// blabla&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;早期的 jQuery:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; window, undefined &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jQuery = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;);&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.jQuery = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.$ = jQuery;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; define === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt; &amp;amp;&amp;amp; define.amd &amp;amp;&amp;amp; define.amd.jQuery ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    define( &lt;span class=&quot;string&quot;&gt;&quot;jquery&quot;&lt;/span&gt;, [], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; jQuery; &amp;#125; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// blabla&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)( &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt; );&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个封装和调用方式一看就是匿名函数嘛，可是匿名函数，然后呢？&lt;br&gt;于是趁着下午比较闲翻开高程从匿名函数这个地方开始看，发现了一系列的知识点……&lt;br&gt;大概脉络是: 函数定义方式 → 匿名函数的创建 → 匿名函数自执行还是IIFE？ → IIFE 的应用&lt;/p&gt;
&lt;h3 id=&quot;函数定义方式&quot;&gt;&lt;a href=&quot;#函数定义方式&quot; class=&quot;headerlink&quot; title=&quot;函数定义方式&quot;&gt;&lt;/a&gt;函数定义方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数声明     &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function foo () &amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;函数声明提升&lt;/strong&gt; ：可以把函数声明放在调用它的语句后面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数表达式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var foo = function () &amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也属于匿名函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用Function构造函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var foo = new Function ()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;匿名函数的创建&quot;&gt;&lt;a href=&quot;#匿名函数的创建&quot; class=&quot;headerlink&quot; title=&quot;匿名函数的创建&quot;&gt;&lt;/a&gt;匿名函数的创建&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;上述 使用函数表达式创建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;(function (x, y) {alert(x + y)})(2, 3)&lt;/code&gt;&lt;br&gt;在第一个括号内创建匿名函数，第二个括号用于调用该匿名函数，并传入参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function (x,y) {alert(x + y)}&lt;/code&gt;部分为所声明的函数&lt;/li&gt;
&lt;li&gt;然后用括号把函数声明包起来 &lt;code&gt;(function (x,y) {alert(x + y)})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最后调用此函数 &lt;code&gt;(function (x, y) {alert(x + y)})(2, 3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里我们也可以看到，创建匿名函数的方式有两种，第二种方式才会声明后立即执行，即不是所有的匿名函数都是可以立即执行的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;“匿名函数自执行”-vs-IIFE&quot;&gt;&lt;a href=&quot;#“匿名函数自执行”-vs-IIFE&quot; class=&quot;headerlink&quot; title=&quot;“匿名函数自执行” vs  IIFE&quot;&gt;&lt;/a&gt;“匿名函数自执行” vs  IIFE&lt;/h3&gt;&lt;p&gt;自执行，有的地方会写为自调用，是一个经常会听到的的概念，我们再深究一下它吧。所谓的“匿名函数自执行”指的是 &lt;code&gt;Self-executing anonymous function&lt;/code&gt; ，经常与 &lt;code&gt;IIFE&lt;/code&gt; 混淆， &lt;code&gt;Immediately-Invoked Function Expression&lt;/code&gt; 即 &lt;strong&gt;立即调用的函数表达式&lt;/strong&gt; ，含义上的辨析 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;先戳一下中文wiki&lt;/a&gt; 吧。&lt;/p&gt;
&lt;p&gt;IIFE 的具体的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 第一个例子&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(function (x) &amp;#123; return x + 1;&amp;#125;(2)) // =&amp;gt; 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 第二个例子&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var result = function (x) &amp;#123; return x + 1; &amp;#125;(2); // =&amp;gt; result 的值为3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把第一个例子敲到控制台中，我们可以看到这个 &lt;code&gt;()&lt;/code&gt; 中的代码立即执行了，返回3。对于第二个例子，它实际上执行的是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var foo = function (x) &amp;#123;return x + 1;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var result = foo(2)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有一个知识点： &lt;strong&gt;对于函数类对象，不论是一个现场定义的匿名函数，还是一个之前定义的有名字的函数，它们在不加括号的时候都代表了这个函数对象本身，而加了括号就代表调用这个函数，也就是这个函数 return 的对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再回到匿名函数自执行与 IIFE 的辨析上，匿名函数自执行(Self-executing anonymous function)是一个不够准确的概念：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 它是一个自执行的匿名函数，它必须用 arguments.callee() 来递归地调用自己&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var foo = function() &amp;#123; arguments.callee(); &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 它是一个立即执行的匿名函数，只是立即执行了一段 code ，并不是调用自己&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(function () &amp;#123; /* code */ &amp;#125; ());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因此 &lt;code&gt;自执行&lt;/code&gt; 意味着调用自己， &lt;code&gt;立即调用，立即执行&lt;/code&gt; 强调的是定义函数的时候就直接执行了函数，与函数体内是否调用自身无关。只能说这是两个看起来有些类似的概念，但实际上所强调的内容完全不一样。IIFE 也可以调用自己，匿名函数可以立即执行。&lt;/p&gt;
&lt;h3 id=&quot;IIFE-的应用&quot;&gt;&lt;a href=&quot;#IIFE-的应用&quot; class=&quot;headerlink&quot; title=&quot;IIFE 的应用&quot;&gt;&lt;/a&gt;IIFE 的应用&lt;/h3&gt;&lt;p&gt;立即调用的函数表达式的根本作用是 &lt;strong&gt;创建一个独立的作用域&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;模拟块级作用域，在ES6之前 JavaScript 是没有块级作用域的。&lt;br&gt;在实际应用场景中，项目引用了很多不同的库 ，库与库之间是如何保证变量不被覆盖呢？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// libA.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// blabla&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// libB.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// blabla&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的话，就如同我们在前面看到的 jquery underscore 那样，使自身作用域独立，不会互相覆盖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决闭包的坑： &lt;strong&gt;闭包只能取得包含函数中任何变量的最后一个值&lt;/strong&gt;&lt;br&gt;这次改造一下《高程三》中提到的例子作为参照吧：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    result.push(foo)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = test()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,len = res.length; i &amp;lt; len; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res[i]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 控制台中打出来的是10个10，而不是1，2，3...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// i 是贯穿整个作用域的，而不是给每个 foo 分配了一个 i&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// test()执行完毕后才调用 console.log() 一定是发生在for循环已循环结束后，此时i值为10&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在线例子可以戳 &lt;a href=&quot;https://jsfiddle.net/46x5s72a/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSFiddle&lt;/a&gt;&lt;br&gt;这个坑该怎么处理呢？引入IIFE！下面代码是可用的，把 i 的值作为索引锁住了&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 解决思路是给每个foo函数创建一个独立的作用域&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 添加一个IIFE&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(index);&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      result.push(foo)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;#125;)(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = test()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,len = res.length; i &amp;lt; len; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res[i]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;汤姆大叔的博客:深入理解JavaScript系列（4）: 立即调用的函数表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/592396/what-is-the-purpose-of-a-self-executing-function-in-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow: What is the purpose of a self executing function in javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://weizhifeng.net/immediately-invoked-function-expression.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;weizhifeng.net: JavaScript中的立即执行函数表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/iife.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;最近在进行 &lt;a href=&quot;https://github.com/MechanicianW/underscore-analysis&quot;&gt;underscore.js 源码分析&lt;/a&gt;，也顺便看了些别的库的大致封装方式&lt;br&gt;underscore:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; root = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _ = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; _) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; _)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; _(obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._wrapped = obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// blabla&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="front-end javascript" scheme="http://mechanicianw.github.io/categories/front-end-javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Before learning the functional programming and design patterns</title>
    <link href="http://mechanicianw.github.io/2016/11/17/javascript-patterns/"/>
    <id>http://mechanicianw.github.io/2016/11/17/javascript-patterns/</id>
    <published>2016-11-17T13:15:00.000Z</published>
    <updated>2017-11-19T06:51:11.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;images/JavaScript-for-Kids.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;h3 id=&quot;OOP-In-JavaScript&quot;&gt;&lt;a href=&quot;#OOP-In-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;OOP In JavaScript&quot;&gt;&lt;/a&gt;OOP In JavaScript&lt;/h3&gt;&lt;h4 id=&quot;Duck-Typing-鸭子类型&quot;&gt;&lt;a href=&quot;#Duck-Typing-鸭子类型&quot; class=&quot;headerlink&quot; title=&quot;Duck Typing 鸭子类型&quot;&gt;&lt;/a&gt;Duck Typing 鸭子类型&lt;/h4&gt;&lt;p&gt;JavaScript 是一门动态类型语言，与静态类型语言相比，在进行变量赋值时并不需要考虑它的类型。在动态类型语言的面向对象设计中， &lt;code&gt;鸭子类型&lt;/code&gt; 的概念非常重要：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;鸭子类型 (duck typing)&lt;/a&gt; 的通俗说法是““当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”” 鸭子类型指导我们只关注对象的行为，而不专注对象本身，即关注 HAS-A,而不是IS-A。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h4&gt;&lt;p&gt;多态的含义是“同一操作作用于不同对象上面，可以产生不同的解释和执行结果”，背后的思想是把“不变的事物”与“可能改变的事物”分离开来，把不变的部分隔离出来，把可变的部分封装起来，使得代码变得可扩展，修改代码也变得更加安全。 &lt;strong&gt;不必再向对象询问“你是什么类型”再根据得到的答案调用对象的某个行为，直接调用就是了&lt;/strong&gt; 。JavaScript 的多态性与生俱来，它在编译时没有类型检查的过程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;多态最根本的作用在于通过 &lt;strong&gt;把过程化的条件分支语句转化为对象的多态性&lt;/strong&gt; 。将行为分布在各个对象中，由对象负责自己的行为，避免代码中充斥着错综复杂的if-else判断。&lt;/p&gt;
&lt;p&gt;一个实际开发中的例子，“引用了不同地图应用的API，使其在页面中渲染地图”&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; googleMap = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  show: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;开始渲染google地图&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baiduMap = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  show: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;开始渲染baidu地图&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不具有多态性的代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; renderMap = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;type&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type === &lt;span class=&quot;string&quot;&gt;&#39;google&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    googleMap.show()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type === &lt;span class=&quot;string&quot;&gt;&#39;baidu&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    baiduMap.show()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;renderMap(&lt;span class=&quot;string&quot;&gt;&#39;google&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;renderMap(&lt;span class=&quot;string&quot;&gt;&#39;baidu&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具有多态性的代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; renderMap = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;map&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (map.show &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    map.show()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;renderMap(googleMap)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;renderMap(googleMap)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封装&quot;&gt;&lt;/a&gt;封装&lt;/h4&gt;&lt;p&gt;封装为的是使信息隐藏，使得对象内部的变化对其它对象是不可见的。&lt;/p&gt;
&lt;p&gt;在 JavaScript 中依赖变量的作用域来实现封装特性 ，以及 ES6 提供的新的变量声明命令 &lt;code&gt;let&lt;/code&gt; 和 新的数据类型 &lt;code&gt;Symbol&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myObject = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _name = &lt;span class=&quot;string&quot;&gt;&#39;encapsulation&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getName: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myObject._name) &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myObject.getName()) &lt;span class=&quot;comment&quot;&gt;// encapsulation&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从 &lt;a href=&quot;http://efe.baidu.com/blog/javascript-private-implement/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在 JavaScript 中依赖变量的作用域来实现封装特性&lt;/a&gt; 可以发现， &lt;code&gt;Symbol + 类WeakMap 的整合方案&lt;/code&gt; 是一个较好的实现方式。&lt;/p&gt;
&lt;p&gt;未完待续&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;images/JavaScript-for-Kids.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;h3 id=&quot;OOP-In-JavaScript&quot;&gt;&lt;a href=&quot;#OOP-In-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;OOP In JavaScript&quot;&gt;&lt;/a&gt;OOP In JavaScript&lt;/h3&gt;&lt;h4 id=&quot;Duck-Typing-鸭子类型&quot;&gt;&lt;a href=&quot;#Duck-Typing-鸭子类型&quot; class=&quot;headerlink&quot; title=&quot;Duck Typing 鸭子类型&quot;&gt;&lt;/a&gt;Duck Typing 鸭子类型&lt;/h4&gt;&lt;p&gt;JavaScript 是一门动态类型语言，与静态类型语言相比，在进行变量赋值时并不需要考虑它的类型。在动态类型语言的面向对象设计中， &lt;code&gt;鸭子类型&lt;/code&gt; 的概念非常重要：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B&quot;&gt;鸭子类型 (duck typing)&lt;/a&gt; 的通俗说法是““当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”” 鸭子类型指导我们只关注对象的行为，而不专注对象本身，即关注 HAS-A,而不是IS-A。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h4&gt;&lt;p&gt;多态的含义是“同一操作作用于不同对象上面，可以产生不同的解释和执行结果”，背后的思想是把“不变的事物”与“可能改变的事物”分离开来，把不变的部分隔离出来，把可变的部分封装起来，使得代码变得可扩展，修改代码也变得更加安全。 &lt;strong&gt;不必再向对象询问“你是什么类型”再根据得到的答案调用对象的某个行为，直接调用就是了&lt;/strong&gt; 。JavaScript 的多态性与生俱来，它在编译时没有类型检查的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="front-end javascript" scheme="http://mechanicianw.github.io/categories/front-end-javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>阅读《高性能JavaScript》(下)</title>
    <link href="http://mechanicianw.github.io/2016/10/03/high-performance-javascript-b/"/>
    <id>http://mechanicianw.github.io/2016/10/03/high-performance-javascript-b/</id>
    <published>2016-10-03T08:43:00.000Z</published>
    <updated>2017-11-19T06:52:03.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/javascript-is-fast.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;接&lt;a href=&quot;http://mechanicianw.github.io/2016/09/26/high-performance-javascript-a/&quot;&gt;前四节的总结&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-字符串和正则表达式&quot;&gt;&lt;a href=&quot;#5-字符串和正则表达式&quot; class=&quot;headerlink&quot; title=&quot;5.字符串和正则表达式&quot;&gt;&lt;/a&gt;5.字符串和正则表达式&lt;/h2&gt;&lt;h4 id=&quot;字符串构建原理&quot;&gt;&lt;a href=&quot;#字符串构建原理&quot; class=&quot;headerlink&quot; title=&quot;字符串构建原理&quot;&gt;&lt;/a&gt;字符串构建原理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;str += &amp;#39;one&amp;#39; + &amp;#39;two&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这行代码运行时会经历四个步骤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在内存中创建一个临时字符串&lt;br&gt;2.链接后的字符串 ‘onetwo’ 被赋值给该临时字符串&lt;br&gt;3.临时字符串与 str 当前值连接&lt;br&gt;4.结果赋给 str&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;过程中产生的临时字符串造成了较大的性能开销，应当避免在字符串构建过程中创建临时字符串：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;str = str + &amp;#39;one&amp;#39; + &amp;#39;two&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于IE之外的浏览器会给表达式左侧字符串分配更多内存，然后把第二个字符串拷贝到最左侧字符串的末尾，因此如果在循环中，基础字符串位于最左端，就可以避免重复拷贝一个逐渐变大的基础字符串。&lt;/p&gt;
&lt;p&gt;除此之外，使用数组项合并的方法（&lt;code&gt;Array.prototype.join&lt;/code&gt;）比其它字符串连接方法更慢，&lt;code&gt;String.prototype.concat&lt;/code&gt; 也比简单的 &lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;+=&lt;/code&gt;更慢，构建大字符串时会造成灾难性的性能问题。&lt;/p&gt;
&lt;p&gt;在此也拓展一个vajoy大大提到的知识点， &lt;strong&gt;字符串方法是如何调用的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字符串（String）类型属于基本类型，它不是对象，那我们是怎么调用它的 &lt;code&gt;concat&lt;/code&gt;、&lt;code&gt;substring&lt;/code&gt; 等字符串属性方法呢？&lt;/p&gt;
&lt;p&gt;在 JavaScript 的世界中万物皆对象&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s1 = &lt;span class=&quot;string&quot;&gt;&quot;some text&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s2 = s1.substring(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s1.color = &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(s1.color);  &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实在每次调用 s1 的属性方法时，后台都会默默地先执行 &lt;code&gt;s1=new String(&amp;#39;some text&amp;#39;)&lt;/code&gt; ，从而让我们可以顺着原型链调用到String对象的属性（比如第二行调用了 &lt;code&gt;substring&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;在调用完毕后，后台会再默默销毁掉这个先前创建的包装对象，因此在第三行代码执行完毕之后， &lt;code&gt;s1&lt;/code&gt;即被销毁，最后 alert 的结果是 &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“引用类型与基本包装类型的主要区别就是对象的生存期。使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。” ——《高程三》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;正则表达式优化&quot;&gt;&lt;a href=&quot;#正则表达式优化&quot; class=&quot;headerlink&quot; title=&quot;正则表达式优化&quot;&gt;&lt;/a&gt;正则表达式优化&lt;/h4&gt;&lt;p&gt;本节内容最重要的是理解 &lt;strong&gt;回溯&lt;/strong&gt; ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;回溯法采用试错的思想，它尝试分步的去解决一个问题。&lt;/p&gt;
&lt;p&gt;在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。&lt;/p&gt;
&lt;p&gt;回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：&lt;/p&gt;
&lt;p&gt;1.找到一个可能存在的正确的答案&lt;/p&gt;
&lt;p&gt;2.在尝试了所有可能的分步方法后宣告该问题没有答案&lt;/p&gt;
&lt;p&gt;在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回溯是正则表达式匹配过程中的基础部分，使用不当也会造成非常大的计算消耗。提高效率的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;加快匹配失败的过程：正则表达式慢的原因通常是匹配失败的过程慢：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;eABC21323AB213&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    r1 = &lt;span class=&quot;regexp&quot;&gt;/\bAB/&lt;/span&gt;.test(str),   &lt;span class=&quot;comment&quot;&gt;//匹配失败的过程较长&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    r2 = &lt;span class=&quot;regexp&quot;&gt;/^AB/&lt;/span&gt;.test(str);    &lt;span class=&quot;comment&quot;&gt;//匹配失败的过程很短&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减少分支条件，具体化量词：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;cat 1990&#39;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//需匹配：19XX年出生的猫或蝙蝠&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r1 = &lt;span class=&quot;regexp&quot;&gt;/(cat|bat)\s\d&amp;#123;4&amp;#125;/&lt;/span&gt;.test(str);  &lt;span class=&quot;comment&quot;&gt;//不推荐&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r1 = &lt;span class=&quot;regexp&quot;&gt;/[bc]at\s19\d&amp;#123;2&amp;#125;/&lt;/span&gt;.test(str);  &lt;span class=&quot;comment&quot;&gt;//推荐，减少分支，具体化量词&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用非捕获组，在不需要反向引用的时候&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只捕获感兴趣的文本以减少后处理：如果需要引用匹配的一部分，应该先捕获那些片段，再用反向引用来处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拆开复杂的表达式：避免在一个正则表达式中处理太多任务。复杂的搜索问题需要条件逻辑，拆分成两个或多个正则表达式更容易解决，通常也会更高效&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;6-快速响应的用户界面&quot;&gt;&lt;a href=&quot;#6-快速响应的用户界面&quot; class=&quot;headerlink&quot; title=&quot;6.快速响应的用户界面&quot;&gt;&lt;/a&gt;6.快速响应的用户界面&lt;/h2&gt;&lt;p&gt;有一次和一位月饼厂的安卓开发聊天，她说她最近跟合作的前端沟通很费劲，她一直想弄明白浏览器UI线程是不是单线程，可是那个前端也不明白这个概念，由此引出了对一些前端开发人员业务知识薄弱的吐槽。听的时候我也没法做任何反应，我也并不清楚这个概念 = =&lt;/p&gt;
&lt;p&gt;好在这一章节就围绕浏览器的UI线程展开的，依然是干货很多让人“知其所以然”。&lt;/p&gt;
&lt;h4 id=&quot;浏览器UI线程&quot;&gt;&lt;a href=&quot;#浏览器UI线程&quot; class=&quot;headerlink&quot; title=&quot;浏览器UI线程&quot;&gt;&lt;/a&gt;浏览器UI线程&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;大多数浏览器让一个单线程共用于执行 JavaScript 和更新用户界面，每个时刻只能执行其中一种操作，这意味着当 JavaScript 代码正在执行时用户界面无法响应输入，反之亦然。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好像是很容易理解的，但还是深入了解一下 wikipedia 中 &lt;code&gt;线程&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再看一下什么是 &lt;code&gt;进程&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进程（英语：process），是计算机中已运行程序的实体。程序本身只是指令、数据及其组织形式的描述，进程才是程序（那些指令和数据）的真正运行实例。&lt;/p&gt;
&lt;p&gt;用户下达运行程序的命令后，就会产生进程。同一程序可产生多个进程（一对多关系），以允许同时有多位用户运行同一程序，却不会相冲突。&lt;br&gt;进程需要一些资源才能完成工作，如CPU使用时间、内存、文件以及I/O设备，且为依序逐一进行，也就是每个CPU核心任何时间内仅能运行一项进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而常规浏览器并不会只有一个线程在运作，主要线程可归类为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/561179/201601/561179-20160103131737151-1750514444.jpg&quot; alt=&quot;common thread&quot;&gt;&lt;/p&gt;
&lt;p&gt;基础知识补到这里，半路出家的程序员心好累。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UI线程的工作基于一个简单的队列系统&lt;/strong&gt; ，任务会保存到队列中直到线程空闲，一旦空闲队列中的下一个任务就被重新提取出来并运行。先看一个简单的交互例子来理解UI线程的队列系统：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;Browser UI Thread Example&amp;lt;/title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;button onclick=&quot;handleClick()&quot;&amp;gt;Click Me&amp;lt;/button&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      function handleClick()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var div = document.createElement(&quot;div&quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        div.innerHTML = &quot;Clicked!&quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        document.body.appendChild(div);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按钮上绑定了一个点击事件，点击后会调用 &lt;code&gt;handleClick()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://hi.csdn.net/attachment/201005/31/0_12752710809o5M.gif&quot; alt=&quot;thread&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按钮被点击，触发UI线程创建两个任务并添加到队列中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新按钮UI&lt;/li&gt;
&lt;li&gt;执行 JavaScript 即执行 &lt;code&gt;handleClick()&lt;/code&gt; 函数段代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行 JavaScript 过程中创建了新的 div 元素并附加在 body 后，又触发了一次UI更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大多数浏览器在 JavaScript 运行时会停止吧新任务加入 UI 线程的队列中，因此如果用户试图在任务运行期间与页面交互，不仅没有即时的 UI 更新，可能连 UI 更新任务都不会加入到队列中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当脚本执行时，UI 不随用户交互而更新，执行时间段内用户交互行为所引发的 JavaScript 任务会被加入队列中，并在最初的 JavaScript 任务完成后一次执行。而这段时间里由交互行为引发的 UI 更新会被自动跳过。因此在一个脚本运行期间点击一个按钮，将无法看到它被按下的样式，尽管它的 onclick 事件处理器会被执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用定时器进行优化&quot;&gt;&lt;a href=&quot;#使用定时器进行优化&quot; class=&quot;headerlink&quot; title=&quot;使用定时器进行优化&quot;&gt;&lt;/a&gt;使用定时器进行优化&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;单个 JavaScript 操作花费的总时间不应该超过100毫秒。否则用户会感到与界面失去联系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一些复杂的任务无法在100毫秒内执行完毕则需要停止 JavaScript 的执行，让出线程控制权使得 UI 可以更新。因此我们需要使用定时器进行优化。&lt;/p&gt;
&lt;p&gt;创建一个定时器会造成 UI 线程暂停，也会重置所有相关的浏览器限制，包括长时间运行脚本定时器和调用栈。这使得定时器成为长时间运行 JavaScript 代码理想的跨浏览器解决方案。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; button = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;my-button&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;button.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  oneMethod();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;notice&quot;&lt;/span&gt;).style.color = &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意 &lt;code&gt;setTimeout()&lt;/code&gt; 和 &lt;code&gt;setInterval()&lt;/code&gt; 函数中的第二个参数表示任务何时被添加到 UI 队列，而不是一定会在这段时间后执行。定时器代码只有在创建它的函数执行完成之后才有可能被执行。如果调用setTimeout()的函数又调用了其他任务，耗时超过定时器延时，定时器代码将立即被执行，它与主调函数之间没有可察觉的延迟。&lt;/p&gt;
&lt;p&gt;同时需要注意的是定时器的精度问题： &lt;strong&gt;定时器延迟通常并不精准，不可用于测量实际时间。所以延迟的最小值建议为25毫秒，以免加上误差延时实际上变得更小，不够进行UI刷新。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我以前还想过用定时器来 console.log 打印出来运行耗费时间来进行优化测试之类的，这样看来还是 too naive ，所以该怎么记录代码的运行时间？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; start = +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;stop;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;someLongProcess();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;stop = +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(stop-start &amp;lt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  alert(&lt;span class=&quot;string&quot;&gt;&quot;Just about right.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  alert(&lt;span class=&quot;string&quot;&gt;&quot;Taking too long.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们也可以利用类似思路，把需要长时间运行的脚本切割成小任务来执行：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timedProcessArray&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;items, process, callback&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; todo = items.concat(); &lt;span class=&quot;comment&quot;&gt;//create a clone of the original&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; start = +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      process(todo.shift());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (todo.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; (+&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;() - start &amp;lt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 检查是否仍有任务需执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (todo.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      setTimeout(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.callee, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      callback(items);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;克隆需执行的任务数组来进行操作，每次取一项并从数组中移除这项(array.shift())，如果此时程序所耗费时间少于50毫秒，那就见缝插针地继续指向任务项，否则就先停止执行代码，25毫秒后继续。&lt;/p&gt;
&lt;p&gt;定时器很好用，但是滥用也同样会导致性能问题。&lt;/p&gt;
&lt;p&gt;在上面定时器的例子中，我想到了另一个通过定时器来实现的优化点：&lt;code&gt;函数节流 throttele&lt;/code&gt; 与 &lt;code&gt;函数防抖 debounce&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Throttle-and-Debounce&quot;&gt;&lt;a href=&quot;#Throttle-and-Debounce&quot; class=&quot;headerlink&quot; title=&quot;Throttle and Debounce&quot;&gt;&lt;/a&gt;Throttle and Debounce&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Throttle 和 Debounce 函数都可以限定函数的执行时间点，在 &lt;code&gt;window.onresize&lt;/code&gt; 事件中：&lt;br&gt;使用 &lt;code&gt;throttle(action, time)&lt;/code&gt; 可以让 &lt;code&gt;action&lt;/code&gt; 在 &lt;code&gt;time&lt;/code&gt; 时间内一定执行且只执行一次;&lt;br&gt;使用 &lt;code&gt;debounce(action, time)&lt;/code&gt; 函数可以让 &lt;code&gt;action&lt;/code&gt; 在 &lt;code&gt;resize&lt;/code&gt; 停止 &lt;code&gt;time&lt;/code&gt; 时间之后执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数节流与防抖都是避免了连续触发事件而导致浏览器崩溃，简单的封装实现：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; throttle = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;action, time&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; startTime = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctx = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; currentTime = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentTime - startTime &amp;gt; time) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            action.apply(ctx);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            startTime = currentTime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;resize&#39;&lt;/span&gt;, throttle(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;resize event&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即事件连续触发时，&lt;code&gt;throttle(action, time)&lt;/code&gt; 中的 &lt;code&gt;action&lt;/code&gt; 会每隔 &lt;code&gt;time&lt;/code&gt; 时间就触发一次。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; debounce = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;action, time&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctx = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (timer) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            clearTimeout(timer);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        timer = setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            action.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;, time);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;resize&#39;&lt;/span&gt;, debounce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;resize&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即事件连续触发时，&lt;code&gt;debounce(action, time)&lt;/code&gt; 中的 &lt;code&gt;action&lt;/code&gt; 并不会立即执行；当第二次触发 &lt;code&gt;window.onresize&lt;/code&gt; 事件时，如果两次事件发生的间隔小于 &lt;code&gt;time&lt;/code&gt;，则仍然不执行 &lt;code&gt;action&lt;/code&gt;，只有两次间隔大于 &lt;code&gt;time&lt;/code&gt; 才会执行 &lt;code&gt;action&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;更多内容可以阅读 &lt;a href=&quot;https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《浅谈 Underscore.js 中 &lt;em&gt;.throttle 和 &lt;/em&gt;.debounce 的差异》&lt;/a&gt;，文中用电梯策略来讲解节流与防抖的区别，以及在 Underscore.js 中的实现，非常值得一看。&lt;/p&gt;
&lt;h2 id=&quot;7-Ajax&quot;&gt;&lt;a href=&quot;#7-Ajax&quot; class=&quot;headerlink&quot; title=&quot;7.Ajax&quot;&gt;&lt;/a&gt;7.Ajax&lt;/h2&gt;&lt;p&gt;这一节内容比较杂，并且一些内容和优化建议现在并不实用了，大概参考一下吧。&lt;/p&gt;
&lt;h4 id=&quot;GET-与-POST-的区别&quot;&gt;&lt;a href=&quot;#GET-与-POST-的区别&quot; class=&quot;headerlink&quot; title=&quot;GET 与 POST 的区别&quot;&gt;&lt;/a&gt;GET 与 POST 的区别&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;GET 请求是幂等的，经 GET 请求的数据会被缓存起来，对于少量数据而言 GET 请求往服务器只发送一个数据包，POST 请求发送两个数据包，一个装载头信息一个装载 POST 正文。只有当请求的 URL 加上参数的长度接近或超过2048个字符时才使用 POST 获取数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是书中给的信息，然而是不准确的。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。&lt;/strong&gt;，区别主要在语义上，POST 请求并不是明文因而相对更安全，以及书中提到的数据包数量的区别。&lt;/p&gt;
&lt;p&gt;更多详细内容可参考 &lt;a href=&quot;http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《浅谈HTTP中Get与Post的区别》&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;8-编程实践&quot;&gt;&lt;a href=&quot;#8-编程实践&quot; class=&quot;headerlink&quot; title=&quot;8.编程实践&quot;&gt;&lt;/a&gt;8.编程实践&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;避免双重求值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免以 &lt;code&gt;new Function()&lt;/code&gt; 的形式来创建函数&lt;/li&gt;
&lt;li&gt;避免用 &lt;code&gt;setTimeout/setInterval&lt;/code&gt; 执行字符串，可改为传入函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 Object/Array 直接量可以加快运行并且也节省了代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;用速度最快的部分（位操作，原生 JavaScript）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面两章没有太多可参考的新内容，都比较过时，就不记录了~ done!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/javascript-is-fast.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;接&lt;a href=&quot;http://mechanicianw.github.io/2016/09/26/high-performance-javascript-a/&quot;&gt;前四节的总结&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-字符串和正则表达式&quot;&gt;&lt;a href=&quot;#5-字符串和正则表达式&quot; class=&quot;headerlink&quot; title=&quot;5.字符串和正则表达式&quot;&gt;&lt;/a&gt;5.字符串和正则表达式&lt;/h2&gt;&lt;h4 id=&quot;字符串构建原理&quot;&gt;&lt;a href=&quot;#字符串构建原理&quot; class=&quot;headerlink&quot; title=&quot;字符串构建原理&quot;&gt;&lt;/a&gt;字符串构建原理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;str += &amp;#39;one&amp;#39; + &amp;#39;two&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这行代码运行时会经历四个步骤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在内存中创建一个临时字符串&lt;br&gt;2.链接后的字符串 ‘onetwo’ 被赋值给该临时字符串&lt;br&gt;3.临时字符串与 str 当前值连接&lt;br&gt;4.结果赋给 str&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://mechanicianw.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>阅读《高性能JavaScript》(上)</title>
    <link href="http://mechanicianw.github.io/2016/09/26/high-performance-javascript-a/"/>
    <id>http://mechanicianw.github.io/2016/09/26/high-performance-javascript-a/</id>
    <published>2016-09-26T15:22:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://img1.doubanio.com/lpic/s28879959.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;这篇只包含前四章节。&lt;/p&gt;
&lt;h2 id=&quot;1-加载与执行&quot;&gt;&lt;a href=&quot;#1-加载与执行&quot; class=&quot;headerlink&quot; title=&quot;1.加载与执行&quot;&gt;&lt;/a&gt;1.加载与执行&lt;/h2&gt;&lt;p&gt;浏览器使用单一进程来处理用户界面UI刷新和JavaScript脚本执行。脚本执行过程中会阻塞页面渲染。&lt;/p&gt;
&lt;p&gt;减少脚本执行对性能影响的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把所有 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签尽可能放到 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标签底部。&lt;/li&gt;
&lt;li&gt;合并脚本，减少HTTP请求带来的额外性能开销。&lt;/li&gt;
&lt;li&gt;无阻塞下载执行JavaScript脚本：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 的 &lt;code&gt;defer&lt;/code&gt; 属性可以使脚本下载后先不执行，老版本浏览器不支持&lt;/li&gt;
&lt;li&gt;书中未提到的 HTML5 &lt;code&gt;async&lt;/code&gt; 属性可以使脚本异步加载执行&lt;/li&gt;
&lt;li&gt;使用XHR对象动态加载脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/image003.jpg&quot; alt=&quot;js-load&quot;&gt;&lt;/p&gt;
&lt;p&gt;这部分的知识是刚接触JavaScript时就看过的，&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IBM开发者的文章&lt;/a&gt;介绍的很详尽。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-数据存取&quot;&gt;&lt;a href=&quot;#2-数据存取&quot; class=&quot;headerlink&quot; title=&quot;2.数据存取&quot;&gt;&lt;/a&gt;2.数据存取&lt;/h2&gt;&lt;p&gt;本章主要讲通过改变数据的存取位置来提高读写性能，其中又详细讲解了作用域链，原型链的工作原理，干货不少。&lt;/p&gt;
&lt;p&gt;首先要了解，一共有四种基本的数据存取位置：字面量，本地（局部）变量，数组元素，对象成员。其中字面量和局部变量的存取很快，数组元素和对象成员相对较慢，尤其是在老版本浏览器。&lt;/p&gt;
&lt;h4 id=&quot;作用域与作用域链&quot;&gt;&lt;a href=&quot;#作用域与作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域与作用域链&quot;&gt;&lt;/a&gt;作用域与作用域链&lt;/h4&gt;&lt;p&gt;每一个JavaScript函数都可以表示为一个对象，Function对象既有可编程访问的属性，又有&lt;strong&gt;仅供JavaScript引擎存取的内部属性&lt;/strong&gt;，其中一个内部属性是&lt;code&gt;[[scope]]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;作用域链是&lt;code&gt;[[scope]]&lt;/code&gt;所包含的函数被创建的作用域中对象的集合，作用域链决定了哪些数据可被函数访问以及查找数据的顺序。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行函数时会创建一个 &lt;code&gt;execution context 执行上下文&lt;/code&gt; ，它是一个内部对象，函数每次执行时对应的执行上下文都是不一样的。函数执行完毕，执行上下文就被销毁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;执行上下文&lt;/code&gt; 被创建时，它的作用域链就初始为执行函数的 &lt;code&gt;[[scope]]&lt;/code&gt; 属性中的对象。这些值按顺序被复制到作用域链中，这一过程完成，即创建好了“活动对象”。&lt;/li&gt;
&lt;li&gt;活动对象是函数运行时的变量对象，包含所有局部变量，命名参数集合以及 &lt;code&gt;this&lt;/code&gt;。然后活动对象会被推入作用域链的最前端。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在函数执行过程中，每遇到一个变量都会在搜索其作用域链，从头部（即活动对象）搜索直到找到标识符，&lt;strong&gt;正是这个搜索过程影响了性能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在执行环境的作用域链中，一个标识符所在的位置越深，读写速度越慢。所以&lt;strong&gt;读写局部变量最快，全局变量最慢。全局变量总是在作用域链的最末端&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;经验：如果一个跨作用域的值在函数中被引用一次以上，那就把它存储在局部变量里。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;两种改变作用域链的情况&quot;&gt;&lt;a href=&quot;#两种改变作用域链的情况&quot; class=&quot;headerlink&quot; title=&quot;两种改变作用域链的情况&quot;&gt;&lt;/a&gt;两种改变作用域链的情况&lt;/h4&gt;&lt;p&gt;有两个语句可以在执行时&lt;em&gt;临时&lt;/em&gt;改变作用域链：&lt;code&gt;with语句&lt;/code&gt;与&lt;code&gt;try-catch中的catch子句&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;with语句&lt;/code&gt; 有性能问题，应避免使用。它是创建了一个包含参数制定对象属性的新对象，并把它推入作用域链最前端，使得局部变量位置变深读写变慢。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try-catch的catch子句&lt;/code&gt;在执行中是把捕捉到的错误对象推入作用域链首位，也会造成同上的性能问题。解决办法是，在子句中把错误委托给一个函数来处理：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  methodThatMightCauseAnError()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  handle(e)  &lt;span class=&quot;comment&quot;&gt;// 委托给错误处理函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;闭包，作用域与内存&quot;&gt;&lt;a href=&quot;#闭包，作用域与内存&quot; class=&quot;headerlink&quot; title=&quot;闭包，作用域与内存&quot;&gt;&lt;/a&gt;闭包，作用域与内存&lt;/h4&gt;&lt;p&gt;有了先前理论的了解，我们就可以理解一下与闭包有关的性能问题。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;assignEvents&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;string&quot;&gt;&#39;xdi9952&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;save-btn&#39;&lt;/span&gt;).onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    saveDocument(id)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://hi.csdn.net/attachment/201005/28/0_1275041109tO2h.gif&quot; alt=&quot;clourse&quot;&gt;&lt;/p&gt;
&lt;p&gt;闭包函数在执行时，它的作用域链与属性 &lt;code&gt;[[scope]]&lt;/code&gt; 中所引用的两个相同的作用域链对象一起被初始化，作用域链首位是闭包函数的活动对象，然后是外部函数的活动对象，最后是全局对象。闭包函数执行时用到的&lt;code&gt;id&lt;/code&gt;和&lt;code&gt;saveDocument&lt;/code&gt;在作用域链第一位之后，这就是使用闭包需要关注的性能点。&lt;/p&gt;
&lt;h4 id=&quot;对象成员，原型与原型链&quot;&gt;&lt;a href=&quot;#对象成员，原型与原型链&quot; class=&quot;headerlink&quot; title=&quot;对象成员，原型与原型链&quot;&gt;&lt;/a&gt;对象成员，原型与原型链&lt;/h4&gt;&lt;p&gt;前文提到的，&lt;strong&gt;访问对象成员的速度慢于访问字面量和局部变量&lt;/strong&gt; ，原因是什么？&lt;/p&gt;
&lt;p&gt;脚本引擎在读取对象属性时，也会按顺序检索。具体可参考&lt;a href=&quot;www.cnblogs.com/snandy/archive/2012/09/01/2664134.html&quot;&gt;这篇博文&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-DOM编程-生来缓慢，我很抱歉&quot;&gt;&lt;a href=&quot;#3-DOM编程-生来缓慢，我很抱歉&quot; class=&quot;headerlink&quot; title=&quot;3.DOM编程 生来缓慢，我很抱歉&quot;&gt;&lt;/a&gt;3.DOM编程 生来缓慢，我很抱歉&lt;/h2&gt;&lt;p&gt;JS引擎和DOM引擎是分开的，所以脚本中对DOM的访问非常耗费性能。最坏的情况是在循环中访问或者修改DOM，此时应该把DOM缓存在局部变量中。&lt;/p&gt;
&lt;h4 id=&quot;HTML集合&quot;&gt;&lt;a href=&quot;#HTML集合&quot; class=&quot;headerlink&quot; title=&quot;HTML集合&quot;&gt;&lt;/a&gt;HTML集合&lt;/h4&gt;&lt;p&gt;需要区分一下HTML集合和数组,使用jQuery选择器或者DOM节点引用的，返回的都是&lt;code&gt;HTML集合&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.getElementById(&amp;#39;one&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&amp;#39;#one&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前在lodash文档里也发现Collection和Array是分开的栏目，当时没当回事儿，现在想想其实是我压根就没有&lt;code&gt;HTML集合&lt;/code&gt;的概念，HTML集合并不是数组，也没有数组可用的方法（etc.&lt;code&gt;slice()&lt;/code&gt;），只是提供了length属性并且可通过数字索引来访问集合中的元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML集合是低效之源&lt;/strong&gt; ，集合是实时性的，一直保持着与文档的连接，任何操作和访问都会重复DOM操作。在相同的内容和数量下，遍历一个数组的速度明显快于遍历一个HTML集合。因此也更不应该遍历或循环HTML集合。如果非要进行这种操作的话，建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要在循环的条件控制语句中读取 length 属性（这个无论是集合还是数组都通用）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把集合转为数组再操作&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toArray&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;coll&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, a = [], len = coll.length; i&amp;lt;len; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a[i] = coll[i]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问集合时使用局部变量，把length缓存在循环外部，把需要多次读取的元素存在局部变量中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;querySelectorAll&quot;&gt;&lt;a href=&quot;#querySelectorAll&quot; class=&quot;headerlink&quot; title=&quot;querySelectorAll()&quot;&gt;&lt;/a&gt;querySelectorAll()&lt;/h4&gt;&lt;p&gt;关于选择器API，建议使用 &lt;code&gt;document.querySelectorAll()&lt;/code&gt; 的原生DOM方法来获取元素列表。&lt;/p&gt;
&lt;p&gt;与&lt;code&gt;getElementById&lt;/code&gt;等api不同，&lt;code&gt;querySelectorAll()&lt;/code&gt; 仅返回一个 NodeList 而非HTML集合，因此这些返回的节点集不会对应实时的文档结构，在遍历节点时可以比较放心地使用该方法。&lt;/p&gt;
&lt;h4 id=&quot;重绘与重排&quot;&gt;&lt;a href=&quot;#重绘与重排&quot; class=&quot;headerlink&quot; title=&quot;重绘与重排&quot;&gt;&lt;/a&gt;重绘与重排&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此博文：《网页性能管理详解》&lt;/a&gt;中也详细介绍了关于浏览器重排与重绘相关的知识。&lt;/p&gt;
&lt;p&gt;调用一下方法时会 &lt;strong&gt;强制浏览器刷新队列并触发重排&lt;/strong&gt; ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;offsetTop/offsetLeft/offsetWidth/offsetHeight&lt;br&gt;scrollTop/scrollLeft/scrollWidth/scrollHeight&lt;br&gt;clientTop/clientLeft/clientWidth/clientHeight&lt;br&gt;getComputedStyle()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此如果需要多次查询布局信息如&lt;code&gt;offsetTop&lt;/code&gt;时，应把其缓存起来。&lt;/p&gt;
&lt;p&gt;减少重排的方法有三种，使元素脱离文档流(&lt;code&gt;display:none&lt;/code&gt;)，在文档之外创建并更新一个文档片段并附加到原始列表(&lt;code&gt;document.createDocumentFragment&lt;/code&gt;)，克隆节点(&lt;code&gt;cloneNode&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;比较推荐的是第二个方案，所产生的DOM遍历和重排次数最少：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fragment = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createDocumentFragment()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;appendDataToElement(fragment, data)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;mylist&#39;&lt;/span&gt;).appendChild(fragment)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;事件委托&quot;&gt;&lt;a href=&quot;#事件委托&quot; class=&quot;headerlink&quot; title=&quot;事件委托&quot;&gt;&lt;/a&gt;事件委托&lt;/h4&gt;&lt;p&gt;每绑定一个事件处理器都是有代价的，要么加重了页面负担，要么增加了运行期的执行时间。所以我们需要使用事件委托来减少事件处理器的数量，而不是给每个元素都绑上事件处理器。&lt;/p&gt;
&lt;p&gt;关于事件委托也是一个坑，先参考一下&lt;a href=&quot;http://stackoverflow.com/questions/1687296/what-is-dom-event-delegation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow: What is DOM Event delegation&lt;/a&gt;，后续再参考高程研究一波。&lt;/p&gt;
&lt;h2 id=&quot;4-算法和流程控制&quot;&gt;&lt;a href=&quot;#4-算法和流程控制&quot; class=&quot;headerlink&quot; title=&quot;4.算法和流程控制&quot;&gt;&lt;/a&gt;4.算法和流程控制&lt;/h2&gt;&lt;p&gt;也是很涨姿势的一章。&lt;/p&gt;
&lt;h4 id=&quot;循环语句&quot;&gt;&lt;a href=&quot;#循环语句&quot; class=&quot;headerlink&quot; title=&quot;循环语句&quot;&gt;&lt;/a&gt;循环语句&lt;/h4&gt;&lt;p&gt;ECMA-262 标准中一共有四种循环类型，&lt;code&gt;for循环&lt;/code&gt;，&lt;code&gt;while循环&lt;/code&gt;，&lt;code&gt;do-while循环&lt;/code&gt;，&lt;code&gt;for-in循环&lt;/code&gt;。前三种循环类型性能所差无几，只有&lt;code&gt;for-in&lt;/code&gt;比其它几种明显要慢，&lt;strong&gt;除了明确需要迭代一个属性数量未知的对象，否则应避免使用for-in循环&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;改善循环性能的切入点有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;减少迭代工作量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;减少对象成员及数组项的查找次数：如上一章所提到的，把数组的length存到局部变量中&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len=items.length; i &amp;lt; len; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  process(items[i])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;采用倒序循环：在每次循环中减少了一次查找属性，减少了控制条件中的一次数值比较&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=items.length;i--; ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  process(items[i])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减少迭代次数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个涨姿势的概念 &lt;a href=&quot;http://www.cnblogs.com/xkfz007/archive/2012/03/27/2420163.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;达夫设备（Duff’s Device）&lt;/a&gt; 适合迭代次数超过1000的场景(虽然现在应该不会再引用这种方法，但是switch-case的思想可以借鉴)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上述四种基本的循环类型，数组后续还引入了基于函数的迭代方法&lt;code&gt;forEach()&lt;/code&gt;，但是在所有情况下，基于循环的迭代比基于函数的迭代快8倍。&lt;/p&gt;
&lt;h4 id=&quot;条件语句&quot;&gt;&lt;a href=&quot;#条件语句&quot; class=&quot;headerlink&quot; title=&quot;条件语句&quot;&gt;&lt;/a&gt;条件语句&lt;/h4&gt;&lt;p&gt;&lt;code&gt;if-else&lt;/code&gt;与&lt;code&gt;switch&lt;/code&gt;比较之下，条件数量较小时使用&lt;code&gt;if-else&lt;/code&gt;，较多时使用&lt;code&gt;switch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;优化&lt;code&gt;if-else&lt;/code&gt;的方法一是确保最可能出现的条件放在首位，二是把&lt;code&gt;if-else&lt;/code&gt;组织成嵌套的&lt;code&gt;if-else&lt;/code&gt;语句。&lt;/p&gt;
&lt;h4 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h4&gt;&lt;p&gt;这里更涨姿势了，不过描述的内容和场景目前基本没遇到过，不会把那么大的数据量放在前端处理，用Node写服务器端的话可能会遇到。先记住这几个结论吧：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器的调用栈大小限制了递归算法在 JavaScript 中的应用，栈溢出错误会导致其它代码中断运行。&lt;br&gt;如果遇到栈溢出错误，可以把方法改成迭代算法。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img1.doubanio.com/lpic/s28879959.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;这篇只包含前四章节。&lt;/p&gt;
&lt;h2 id=&quot;1-加载与执行&quot;&gt;&lt;a href=&quot;#1-加载与执行&quot; class=&quot;headerlink&quot; title=&quot;1.加载与执行&quot;&gt;&lt;/a&gt;1.加载与执行&lt;/h2&gt;&lt;p&gt;浏览器使用单一进程来处理用户界面UI刷新和JavaScript脚本执行。脚本执行过程中会阻塞页面渲染。&lt;/p&gt;
&lt;p&gt;减少脚本执行对性能影响的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把所有 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签尽可能放到 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标签底部。&lt;/li&gt;
&lt;li&gt;合并脚本，减少HTTP请求带来的额外性能开销。&lt;/li&gt;
&lt;li&gt;无阻塞下载执行JavaScript脚本：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 的 &lt;code&gt;defer&lt;/code&gt; 属性可以使脚本下载后先不执行，老版本浏览器不支持&lt;/li&gt;
&lt;li&gt;书中未提到的 HTML5 &lt;code&gt;async&lt;/code&gt; 属性可以使脚本异步加载执行&lt;/li&gt;
&lt;li&gt;使用XHR对象动态加载脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://mechanicianw.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>一些关于 fetch api 的基本设定</title>
    <link href="http://mechanicianw.github.io/2016/08/22/basic-fetch-api/"/>
    <id>http://mechanicianw.github.io/2016/08/22/basic-fetch-api/</id>
    <published>2016-08-22T08:24:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;p&gt;长久以来，我们一直都通过XMLHttpRequest(XHR)来执行异步请求，但它有很多缺陷与不便之处，W3C官方则推出了新的api &lt;code&gt;Fetch&lt;/code&gt;来替换它。&lt;/p&gt;
&lt;h3 id=&quot;XMLHttpRequest的缺陷&quot;&gt;&lt;a href=&quot;#XMLHttpRequest的缺陷&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest的缺陷&quot;&gt;&lt;/a&gt;XMLHttpRequest的缺陷&lt;/h3&gt;&lt;p&gt;先看一个典型的XHR例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.open(&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.responseType = &lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(xhr.response);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Booo&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.send();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看出，XHR是基于事件的异步模型，在设计上不符合分离原则，输入、输出和用事件来跟踪的状态混杂在一个对象里。我们必须创建实例来发送请求。相比于ES6发布的Promise，Generator，基于事件的模型是非常落后难用的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Fetch-Api的特点&quot;&gt;&lt;a href=&quot;#Fetch-Api的特点&quot; class=&quot;headerlink&quot; title=&quot;Fetch Api的特点&quot;&gt;&lt;/a&gt;Fetch Api的特点&lt;/h3&gt;&lt;p&gt;fetch api是基于&lt;code&gt;Promise&lt;/code&gt;设计的，定义在BOM的&lt;code&gt;window&lt;/code&gt;对象之中。建议阅读资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fetch.spec.whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fetch Living Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN: GlobalFetch 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caniuse.com/#search=fetch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;caniuse 浏览器支持率&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-08-18%20%E4%B8%8B%E5%8D%8810.03.45.png&quot; alt=&quot;caniuse-fetch&quot;&gt;&lt;/p&gt;
&lt;p&gt;截止到2016年8月，Chrome43+，Firefox47+支持fetch api，对于低版本的浏览器，github上有许多&lt;a href=&quot;https://github.com/camsong/fetch-ie8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;polyfill&lt;/a&gt;可以使其兼容。&lt;/p&gt;
&lt;p&gt;一个典型的fetch例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fetch(url).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response.json();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Booo&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用ES6的箭头函数重构之后：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fetch(url).then(r =&amp;gt; r.json())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .then(data =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .catch(e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Booo&quot;&lt;/span&gt;))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用还处于草案阶段的&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/async#async函数&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES7的async函数&lt;/a&gt;再重构一下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;() =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; response = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; fetch(url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; response.json();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Booo&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就可以把一个异步的请求代码结构写得看起来跟同步请求差不多了。&lt;/p&gt;
&lt;p&gt;由此可见，&lt;code&gt;Fetch&lt;/code&gt;基于Promise实现，支持async/await，语法更简洁。&lt;/p&gt;
&lt;h3 id=&quot;How-to-Use&quot;&gt;&lt;a href=&quot;#How-to-Use&quot; class=&quot;headerlink&quot; title=&quot;How to Use&quot;&gt;&lt;/a&gt;How to Use&lt;/h3&gt;&lt;h4 id=&quot;fetch&quot;&gt;&lt;a href=&quot;#fetch&quot; class=&quot;headerlink&quot; title=&quot;fetch()&quot;&gt;&lt;/a&gt;fetch()&lt;/h4&gt;&lt;p&gt;语法：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fetch(input, init).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123; ... &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input&lt;/code&gt; :要获取的资源&lt;ul&gt;
&lt;li&gt;字符串，资源的url&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;Request&lt;/code&gt;对象（后面会介绍Request)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; :可选，是请求的配置项&lt;ul&gt;
&lt;li&gt;method: 请求方式，GET/POST/PUT/DELETE等等&lt;/li&gt;
&lt;li&gt;headers: 请求头，可能是&lt;code&gt;Headers 对象&lt;/code&gt;或者 ByteString&lt;/li&gt;
&lt;li&gt;body: 请求的Body信息&lt;/li&gt;
&lt;li&gt;mode: 请求的模式，cors/no-cors/same-origin&lt;/li&gt;
&lt;li&gt;credentials: 请求的credentials，omit/same-origin/include&lt;/li&gt;
&lt;li&gt;cache: 请求的缓存模式， default/no-store/reload/ no-cache/force-cache/only-if-cached&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回值：返回一个&lt;code&gt;Promise对象&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fetch引入了3个接口，它们分别是 &lt;code&gt;Headers&lt;/code&gt;,&lt;code&gt;Request&lt;/code&gt; 以及 &lt;code&gt;Response&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&quot;Headers&quot;&gt;&lt;a href=&quot;#Headers&quot; class=&quot;headerlink&quot; title=&quot;Headers()&quot;&gt;&lt;/a&gt;Headers()&lt;/h4&gt;&lt;p&gt;Headers()是一个可检索的多映射名值表，也可穿多维数组或者json&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reqHeaders = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Headers();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;reqHeaders = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Headers(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;: content.length.toString(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;reqHeaders.append(&lt;span class=&quot;string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(reqHeaders.has(&lt;span class=&quot;string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(reqHeaders.has(&lt;span class=&quot;string&quot;&gt;&quot;Set-Cookie&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Headers()有一个&lt;code&gt;guard&lt;/code&gt;属性来规定哪些参数是可写的。&lt;/p&gt;
&lt;h4 id=&quot;Requset&quot;&gt;&lt;a href=&quot;#Requset&quot; class=&quot;headerlink&quot; title=&quot;Requset()&quot;&gt;&lt;/a&gt;Requset()&lt;/h4&gt;&lt;p&gt;语法，参数与fetch()类似：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var myRequest = new Request(input, init);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中可选的init配置项比fetch()多了几项(redirect/integrity/referrer)&lt;/p&gt;
&lt;h4 id=&quot;Response&quot;&gt;&lt;a href=&quot;#Response&quot; class=&quot;headerlink&quot; title=&quot;Response()&quot;&gt;&lt;/a&gt;Response()&lt;/h4&gt;&lt;p&gt;在fetch()的回调中我们可以获得一个&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Response实例&lt;/a&gt;。Response有很多实用的只读属性，比如Response.ok/Response.type/Response.headers等等。&lt;/p&gt;
&lt;h3 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN: GlobalFetch 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jakearchibald.com/2015/thats-so-fetch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jake Archibald: That’s so fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2015/03/this-api-is-so-fetching/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hacks Mozilla: This API is so Fetching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/camsong/blog/issues/2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;camsong: 传统Ajax 已死，Fetch 永生&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;长久以来，我们一直都通过XMLHttpRequest(XHR)来执行异步请求，但它有很多缺陷与不便之处，W3C官方则推出了新的api &lt;code&gt;Fetch&lt;/code&gt;来替换它。&lt;/p&gt;
&lt;h3 id=&quot;XMLHttpRequest的缺陷&quot;&gt;&lt;a href=&quot;#XMLHttpRequest的缺陷&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest的缺陷&quot;&gt;&lt;/a&gt;XMLHttpRequest的缺陷&lt;/h3&gt;&lt;p&gt;先看一个典型的XHR例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.open(&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, url);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.responseType = &lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(xhr.response);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Booo&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xhr.send();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看出，XHR是基于事件的异步模型，在设计上不符合分离原则，输入、输出和用事件来跟踪的状态混杂在一个对象里。我们必须创建实例来发送请求。相比于ES6发布的Promise，Generator，基于事件的模型是非常落后难用的。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://mechanicianw.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>关于浏览器缓存</title>
    <link href="http://mechanicianw.github.io/2016/07/18/browser-cache-summary/"/>
    <id>http://mechanicianw.github.io/2016/07/18/browser-cache-summary/</id>
    <published>2016-07-18T13:36:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;p&gt;浏览器缓存就是将web资源保存在本地，就不用再每次都向服务器请求相同的资源。当下一个请求发起，如果是同样的url，浏览器会根据缓存机制来决定是读取本地的内容还是向服务器发送请求。显而易见，浏览器缓存可以减少带宽消耗，加快用户的访问速度同时减轻服务器压力。&lt;/p&gt;
&lt;p&gt;浏览器的缓存机制主要分为两种，http协议定义的缓存机制和非http协议定义的缓存机制。后者主要通过在html文件中设置&lt;code&gt;meta标签&lt;/code&gt;来实现。&lt;/p&gt;
&lt;h2 id=&quot;与缓存相关的首部字段&quot;&gt;&lt;a href=&quot;#与缓存相关的首部字段&quot; class=&quot;headerlink&quot; title=&quot;与缓存相关的首部字段&quot;&gt;&lt;/a&gt;与缓存相关的首部字段&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/CACHE.png&quot; alt=&quot;http首部字段&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/w704.jpg&quot; alt=&quot;状态图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Pragma与Expires&quot;&gt;&lt;a href=&quot;#Pragma与Expires&quot; class=&quot;headerlink&quot; title=&quot;Pragma与Expires&quot;&gt;&lt;/a&gt;Pragma与Expires&lt;/h3&gt;&lt;p&gt;由上表可以看到，Pragma与Expires是http1.0中的内容，是早期的浏览器缓存策略，现在我们也会经常看到看到这两个字段，为的是http协议向下兼容。&lt;br&gt;Pragma属于通用首部字段，在请求和响应报文章都可以设置，一般要求Pragama指令设定在html文件中的&lt;code&gt;&amp;lt;meta&amp;gt;标签&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;Pragma&amp;quot; content=&amp;quot;no-cache&amp;quot;&amp;gt;&lt;/code&gt;&lt;br&gt;不过Pragma一般只有在设置于响应报文中时才会生效。&lt;/p&gt;
&lt;p&gt;Expires是响应头字段，用来启用缓存和规定缓存失效时间。Expires的值对应一个GMT时间，比如“Mon, 22 Jul 2002 11:12:01 GMT”来告诉浏览器资源缓存过期时间，如果还没过该时间点则不发请求。&lt;/p&gt;
&lt;p&gt;如果在meta标签中设置expires只是能设置页面在IE浏览器中是否缓存（对页面资源无效）。如果是在服务端报头返回Expires字段，则在任何浏览器中都能正确设置资源缓存的时间。需要注意的是，expires设置的缓存时间是相对服务器上时间而言的，如果客户端时间与服务器时间不一致，这个缓存也就没意义了。&lt;/p&gt;
&lt;p&gt;另外，同时设置Expires和Pragma的话，Pragma的优先级会更高。&lt;/p&gt;
&lt;h3 id=&quot;Cache-Control&quot;&gt;&lt;a href=&quot;#Cache-Control&quot; class=&quot;headerlink&quot; title=&quot;Cache-Control&quot;&gt;&lt;/a&gt;Cache-Control&lt;/h3&gt;&lt;p&gt;Cache-Control分别能在请求报文和响应报文中使用，来定义缓存有效时间，优先级高于Pragma与Expires。Cache-Control也修正了上述Expires时间差的问题。&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/6941baebgw1eukzzwcvnij20gi089jvb.jpg&quot; alt=&quot;cache-control可设置的值&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Last-Modified&quot;&gt;&lt;a href=&quot;#Last-Modified&quot; class=&quot;headerlink&quot; title=&quot;Last-Modified&quot;&gt;&lt;/a&gt;Last-Modified&lt;/h3&gt;&lt;p&gt;浏览器第一次请求某URL时会返回200，内容是所请求的资源。服务器将资源传递给客户端时，会将资源最后更改的时间以“Last-Modified: GMT”的形式加在实体首部上一起返回给客户端。&lt;/p&gt;
&lt;p&gt;客户端会为资源标记上该信息，下次再次请求时，会把该信息附带在请求报文中一并带给服务器去做检查“If-Modified-Since: GMT”，若传递的时间值与服务器上该资源最终修改时间是一致的，则说明该资源没有被修改过，直接返回304状态码即可，内容为空，节省了传输数据量。&lt;/p&gt;
&lt;h3 id=&quot;ETag&quot;&gt;&lt;a href=&quot;#ETag&quot; class=&quot;headerlink&quot; title=&quot;ETag&quot;&gt;&lt;/a&gt;ETag&lt;/h3&gt;&lt;p&gt;Http1.1中定义了实体首部字段&lt;code&gt;Etag&lt;/code&gt;，即在服务器响应时给请求的URL做标记一个唯一标识符，在响应头中传给客户端。在下一次发请求时，客户端会带上Etag，服务器通过比较服务器上资源的Etag与客户端传过来的Etag来判断资源有没有被修改。若没被修改，则返回304.&lt;/p&gt;
&lt;p&gt;如果Last-Modified和ETag同时被使用，则要求它们的验证都必须通过才会返回304，若其中某个验证没通过，则服务器会按常规返回资源实体及200状态码。&lt;/p&gt;
&lt;h2 id=&quot;缓存策略&quot;&gt;&lt;a href=&quot;#缓存策略&quot; class=&quot;headerlink&quot; title=&quot;缓存策略&quot;&gt;&lt;/a&gt;缓存策略&lt;/h2&gt;&lt;h3 id=&quot;Last-Modified和Etag-→-304&quot;&gt;&lt;a href=&quot;#Last-Modified和Etag-→-304&quot; class=&quot;headerlink&quot; title=&quot;Last-Modified和Etag → 304&quot;&gt;&lt;/a&gt;Last-Modified和Etag → 304&lt;/h3&gt;&lt;p&gt;这两个字段经常在一起配合使用，来判断资源是否已被修改，确定读取本地缓存还是重新请求资源。ETag主要是用来解决Last-Modified无法解决的问题（文件修改频繁，服务器得到的时间不精确等等）。&lt;/p&gt;
&lt;p&gt;这两个字段的特点及应用场景在于，本地已有缓存，但是它们需要向服务器发送请求来确定本地缓存是否是最新的，若服务器认为本地缓存是最新的，可用，则返回304&lt;/p&gt;
&lt;h3 id=&quot;Expires-Cache-Control-→-200&quot;&gt;&lt;a href=&quot;#Expires-Cache-Control-→-200&quot; class=&quot;headerlink&quot; title=&quot;Expires/Cache-Control → 200&quot;&gt;&lt;/a&gt;Expires/Cache-Control → 200&lt;/h3&gt;&lt;p&gt;区别于304状态码，200意味着不向服务器发请求，直接启用本地缓存。即Expires/Cache-Control字段通过绝对时间/相对时间判断出本地缓存是有效的。&lt;/p&gt;
&lt;p&gt;思维导图如下（自己画的感觉很不美观 = =）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%20%281%29.png&quot; alt=&quot;思维导图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;用户行为与缓存&quot;&gt;&lt;a href=&quot;#用户行为与缓存&quot; class=&quot;headerlink&quot; title=&quot;用户行为与缓存&quot;&gt;&lt;/a&gt;用户行为与缓存&lt;/h2&gt;&lt;p&gt;浏览器缓存也与用户行为有关，在地址栏按回车与直接F5是不一样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/6941baebgw1eukzzr7rc2j20hg04kjsd.jpg&quot; alt=&quot;用户行为&quot;&gt;&lt;/p&gt;
&lt;p&gt;由图可知，当用户按F5进行刷新，Expires/Cache-Control会失效，浏览器将再次发送请求通过Last-Modified/ETag来判断缓存是否有效。当用户通过Ctrl+F5进行强制刷新时，所有字段都会失效，浏览器将重新请求获取资源。&lt;/p&gt;
&lt;h3 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3:HTTP1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/vajoy/p/5341664.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vajoy:浅谈浏览器http的缓存机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.laruence.com/2010/03/05/1332.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;鸟哥:浏览器缓存机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/eroswang/article/details/8302191&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eroswang:浏览器缓存详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器缓存就是将web资源保存在本地，就不用再每次都向服务器请求相同的资源。当下一个请求发起，如果是同样的url，浏览器会根据缓存机制来决定是读取本地的内容还是向服务器发送请求。显而易见，浏览器缓存可以减少带宽消耗，加快用户的访问速度同时减轻服务器压力。&lt;/p&gt;
&lt;p&gt;浏览器的缓存机制主要分为两种，http协议定义的缓存机制和非http协议定义的缓存机制。后者主要通过在html文件中设置&lt;code&gt;meta标签&lt;/code&gt;来实现。&lt;/p&gt;
&lt;h2 id=&quot;与缓存相关的首部字段&quot;&gt;&lt;a href=&quot;#与缓存相关的首部字段&quot; class=&quot;headerlink&quot; title=&quot;与缓存相关的首部字段&quot;&gt;&lt;/a&gt;与缓存相关的首部字段&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/CACHE.png&quot; alt=&quot;http首部字段&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="http" scheme="http://mechanicianw.github.io/categories/http/"/>
    
    
  </entry>
  
  <entry>
    <title>避免脏pr：使用git rebase避免无谓的merge</title>
    <link href="http://mechanicianw.github.io/2016/06/09/git-rebase-workflow/"/>
    <id>http://mechanicianw.github.io/2016/06/09/git-rebase-workflow/</id>
    <published>2016-06-09T03:51:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;问题复现与解决&quot;&gt;&lt;a href=&quot;#问题复现与解决&quot; class=&quot;headerlink&quot; title=&quot;问题复现与解决&quot;&gt;&lt;/a&gt;问题复现与解决&lt;/h3&gt;&lt;p&gt;在团队开发中，由于git使用的不够合理规范，开pr之后就会发现其中掺杂着若干merge的commit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/git-merge.jpg&quot; alt=&quot;commit history&quot;&gt;&lt;/p&gt;
&lt;p&gt;事实上我们本地的branch和远端的branch会同步地非常频繁，这两个分支几乎完全同步，所以以上的merge动作是没有必要的。并且如果一个pr中存在merge，那么pr的files changed中就会看到merge目标的代码。这会给代码 Review 的工作代码困扰。因为代码reviewm时通常是看一个pr修改了哪些代码，现在pr中满是merge目标的代码，是没办法review的。&lt;/p&gt;
&lt;p&gt;想要解决这个问题的关键是永远不要merge主分支，而是rebase主分支。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git fetch origin master&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# git merge origin/master # 不要这么干&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git rebase origin/master&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# git pull origin master # 不要这么干&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git pull --rebase&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要是因为&lt;code&gt;git pull&lt;/code&gt;这一git命令实际执行了&lt;code&gt;git fetch&lt;/code&gt;和&lt;code&gt;git merge FETCH_HEAD&lt;/code&gt;两条指令。因此不要直接使用&lt;code&gt;git pull&lt;/code&gt;来更新代码。&lt;code&gt;git pull --rebase&lt;/code&gt;指令的意思是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把本地repo自从上次pull之后的变更暂存起来&lt;/li&gt;
&lt;li&gt;回到上次pull时的情况&lt;/li&gt;
&lt;li&gt;套用远端的变更&lt;/li&gt;
&lt;li&gt;套用第一步中暂存的本地变更&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;关于git-rebase&quot;&gt;&lt;a href=&quot;#关于git-rebase&quot; class=&quot;headerlink&quot; title=&quot;关于git rebase&quot;&gt;&lt;/a&gt;关于git rebase&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt;和&lt;code&gt;git merge&lt;/code&gt;做的事是一样的，都是把一个分支合并到另一个分支，只是方式不同，我们应该在不同情况下做出更合理的选择。我们做一下对比。&lt;br&gt;假设合并前是这样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;D—E master&lt;br&gt;     /&lt;br&gt;A—B—C—F origin/master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用merge合并后：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;D——–E&lt;br&gt;     /          \&lt;br&gt;A—B—C—F—-G   master, origin/master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;适应rebase合并后：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A—B—C—F—D’—E’   master, origin/master&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可见，使用rebase其实是重写了提交记录，并使我们的项目历史会非常整洁，它不想git merge那样引入不必要的合并提交，rebase使得项目历史呈线性，便于通过git log查看项目历史。&lt;/p&gt;
&lt;h3 id=&quot;A-rebase-based-workflow&quot;&gt;&lt;a href=&quot;#A-rebase-based-workflow&quot; class=&quot;headerlink&quot; title=&quot;A rebase-based workflow&quot;&gt;&lt;/a&gt;A rebase-based workflow&lt;/h3&gt;&lt;p&gt;1.新建分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout master&lt;br&gt;  git pull    #更新master&lt;br&gt;  git checkout master -b test   #从master创建feature分支&lt;br&gt;  git push -u origin test:test&lt;br&gt;  #把分支push到远程，本地分支名在前，-u是–set-upstream-to 的简写，设置追踪分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.更新分支&lt;/p&gt;
&lt;p&gt;从master更新&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git pull –rebase origin master #此方法不会更新本地master分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从test更新&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git pull –rebase #需先设置追踪分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.完成后回到主分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git checkout master&lt;br&gt;  git pull     #这里不会导致出现merge commit&lt;br&gt;  git rebase test     #把commits拉取到主分支&lt;br&gt;  git push&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;处理脏pr&quot;&gt;&lt;a href=&quot;#处理脏pr&quot; class=&quot;headerlink&quot; title=&quot;处理脏pr&quot;&gt;&lt;/a&gt;处理脏pr&lt;/h3&gt;&lt;p&gt;这里只介绍一个比较好理解的方法，从主分支上新建一个干净的分支，然后把需要搞干净的pr中所有非merge的commit都cherry-pick到新分支。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git fetch origin master:new-feature&lt;br&gt;  git checkout new-feature&lt;br&gt;  git cherry-pick COMMIT_HASH_1&lt;br&gt;  git cherry-pick COMMIT_HASH_2&lt;br&gt;  …&lt;br&gt;  git cherry-pick COMMIT_HASH_N&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cherry-pick命令”复制”一个提交节点并在当前分支做一次完全一样的新提交。&lt;br&gt;注意cherry-pick的顺序应是commit &lt;strong&gt;从旧到新&lt;/strong&gt; 的顺序，否则会一直出现无数冲突。&lt;/p&gt;
&lt;h3 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://randyfay.com/node/91&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RandyFay:A Rebase Workflow for Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow:When do you use git rebase instead of git merge?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/457927/git-workflow-and-rebase-vs-merge-questions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow:git workflow and rebase vs merge questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase%E7%9A%84%E9%80%89%E6%8B%A9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-recipes:代码合并:Merge、Rebase的选择&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.web-tinker.com/article/21112.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WEB研究所:git 实践之避免 merge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题复现与解决&quot;&gt;&lt;a href=&quot;#问题复现与解决&quot; class=&quot;headerlink&quot; title=&quot;问题复现与解决&quot;&gt;&lt;/a&gt;问题复现与解决&lt;/h3&gt;&lt;p&gt;在团队开发中，由于git使用的不够合理规范，开pr之后就会发现其中掺杂着若干merge的commit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/git-merge.jpg&quot; alt=&quot;commit history&quot;&gt;&lt;/p&gt;
&lt;p&gt;事实上我们本地的branch和远端的branch会同步地非常频繁，这两个分支几乎完全同步，所以以上的merge动作是没有必要的。并且如果一个pr中存在merge，那么pr的files changed中就会看到merge目标的代码。这会给代码 Review 的工作代码困扰。因为代码reviewm时通常是看一个pr修改了哪些代码，现在pr中满是merge目标的代码，是没办法review的。&lt;/p&gt;
&lt;p&gt;想要解决这个问题的关键是永远不要merge主分支，而是rebase主分支。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://mechanicianw.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>How does data binding work in AngularJS</title>
    <link href="http://mechanicianw.github.io/2016/06/05/angular-data-binding/"/>
    <id>http://mechanicianw.github.io/2016/06/05/angular-data-binding/</id>
    <published>2016-06-05T07:28:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;p&gt;AngularJS可以记住value值并且会把它和之前的value值进行比较。这就是基本的脏检查机制。如果某处的value值发生了变化，那么AngularJS就会触发指定事件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$apply()&lt;/code&gt;这个方法是用来处理AngularJS框架之外的表达式的，与它相辅相成的还有&lt;code&gt;$digest()&lt;/code&gt;方法。一次digest就是一次完全的脏检查，它可以运行在所有的浏览器中。&lt;/p&gt;
&lt;h3 id=&quot;关于-watch&quot;&gt;&lt;a href=&quot;#关于-watch&quot; class=&quot;headerlink&quot; title=&quot;关于$watch&quot;&gt;&lt;/a&gt;关于$watch&lt;/h3&gt;&lt;p&gt;每一次你在UI中绑定什么东西时你就会往&lt;code&gt;$watch&lt;/code&gt;的队列中插入一条&lt;code&gt;$watch&lt;/code&gt;，想象一下$watch就是在所监测的model中可以侦查数据变化的东西。比如说：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;User: &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;user&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Password: &amp;lt;input type=&amp;quot;password&amp;quot; ng-model=&amp;quot;pass&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里我们分别给两个input绑定了$scope.user和$scope.pass，就是说我们向$watch队列添加了两个$watch。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;每一个绑定到了UI上的数据都会生成一个$watch，我们的模板加载完成时，也就是在linking阶段，Angular解释器会寻找每一个directive并且创造它们所需的$watch。&lt;/p&gt;
&lt;p&gt;一个watcher包含了三个东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;它正在监听的表达式。有可能是一个简单的属性名，也有可能是更复杂的东西&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个表达式目前已知的value值，它会与当前正在计算的表达式value值进行核对比较，如果监听到value值发生了改变将会触发函数并把$scope标记为dirty&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;被触发执行的函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$$watchers = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        eq: false, // 表明我们是否需要检查对象级别的相等&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fn: function( newValue, oldValue ) &amp;#123;&amp;#125;, // 这是我们提供的监听器函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        last: &amp;apos;Ryan&amp;apos;, // 变量的最新值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        exp: function()&amp;#123;&amp;#125;, // 我们提供的watchExp函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        get: function()&amp;#123;&amp;#125; // Angular&amp;apos;s编译后的watchExp函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义监听器的几种方法：&lt;br&gt;1.把$watch设置为$scope的一种属性:&lt;code&gt;$scope.$watch(&amp;#39;person.username&amp;#39;, validateUnique);&lt;/code&gt;&lt;br&gt;2.插入angular表达式:&lt;code&gt;&amp;lt;p&amp;gt;username: &amp;lt;/p&amp;gt;&lt;/code&gt;&lt;br&gt;3.使用类似于ng-model的指令来定义监听器:&lt;code&gt;&amp;lt;input ng-model=&amp;quot;person.username /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;关于-digest和-apply&quot;&gt;&lt;a href=&quot;#关于-digest和-apply&quot; class=&quot;headerlink&quot; title=&quot;关于$digest和$apply&quot;&gt;&lt;/a&gt;关于$digest和$apply&lt;/h3&gt;&lt;p&gt;如果你点击一个按钮，或者在一个input框中输入，事件的回调函数会在javascript中运行，并且你可以做任意的DOM操作，当回调函数结束时，浏览器会相应地在DOM中做出改变。&lt;/p&gt;
&lt;p&gt;当一个控制器/指令/等等东西在AngularJS中运行时，AngularJS内部会运行一个叫做$scope.$apply的函数。这个$apply函数会接收一个函数作为参数并运行它，在这之后才会在rootScope上运行$digest函数。&lt;/p&gt;
&lt;p&gt;AngularJS的$apply函数代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$apply: function(expr) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    try &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      beginPhase(&amp;apos;$apply&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      return this.$eval(expr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; catch (e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      $exceptionHandler(e);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; finally &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      clearPhase();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      try &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $rootScope.$digest();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; catch (e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $exceptionHandler(e);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        throw e;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由此可见，使用$apply可带参数。&lt;/p&gt;
&lt;p&gt;$digest函数将会在$rootScope中被$scope.$apply所调用。它将会在$rootScope中运行digest循环，然后向下遍历每一个作用域并在每个作用域上运行循环。在简单的情形中，digest循环将会触发所有位于$$watchers变量中的所有watchExp函数，将它们和最新的值进行对比，如果值不相同，就会触发监听器。$digest函数检查$watch队列中的所有监听器最新的value值，一次$digest循环是被指令触发的。如果表达式新的value值与之前不同，就会调用监听器的函数，这个函数可能是重新编译部分的DOM，重新计算$scope的值，激活一个AJAX请求，或者任何你想做的事。&lt;/p&gt;
&lt;p&gt;监听器函数可以修改$scope或是父$scope的其他属性，一旦有出发了一个监听器函数，我们就无法保证其它的$scope也是干净的，所以我们会再次执行整个digest循环。&lt;/p&gt;
&lt;p&gt;$apply与$digest作用类似，$apply会使ng进入$digest cycle, 并从$rootScope开始遍历(深度优先)检查数据变更。不同之处在于$apply可以带参数，并且会触发作用域上的所有监控，\$digest仅仅触发当前作用域和子作用域的监控。&lt;/p&gt;
&lt;h3 id=&quot;build-your-own-dirty-checking&quot;&gt;&lt;a href=&quot;#build-your-own-dirty-checking&quot; class=&quot;headerlink&quot; title=&quot;build your own dirty-checking&quot;&gt;&lt;/a&gt;build your own dirty-checking&lt;/h3&gt;&lt;p&gt;了解以上知识后，我们可以自己写一个具有基本功能的脏检测了。&lt;br&gt;首先定义Scope，然后扩展这个函数的原型对象来复制\$digest和\$watch&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var Scope = function( ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.$$watchers = [];   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Scope.prototype.$watch = function( ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Scope.prototype.$digest = function( ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置\$watch函数，它接收watchExp和listener这两个参数，被调用时我们会把其push到$$watchers数组中。因此代码扩展为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Scope.prototype.$watch = function( watchExp, listener ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.$$watchers.push( &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        watchExp: watchExp,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        listener: listener || function() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有传入listener的话我们会把它设置为空函数。&lt;br&gt;$digest用来检查新值旧值是否相等，如果不相等则触发监听器，不断循环这个过程，直到新值旧值相等。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Scope.prototype.$digest = function( ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var dirty;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    do &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            dirty = false;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for( var i = 0; i &amp;lt; this.$$watchers.length; i++ ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                var newValue = this.$$watchers[i].watchExp(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    oldValue = this.$$watchers[i].last;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if( oldValue !== newValue ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    this.$$watchers[i].listener(newValue, oldValue);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    dirty = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    this.$$watchers[i].last = newValue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; while(dirty);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下一步我们需要创建一个作用域的实例，并把实例赋值给$scope，然后注册监听函数，使得更新$scope之后运行$digest&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var $scope = new Scope();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$scope.name = &amp;apos;Ryan&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$scope.$watch(function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return $scope.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, function( newValue, oldValue ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(newValue, oldValue);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$scope.$digest();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们发现在控制台输出了&lt;code&gt;Ryan undefined&lt;/code&gt;，成功了！&lt;br&gt;最后我们可以把$digest函数绑定到事件上，比如input元素的keyup事件，即意味着我们可以实现双向数据绑定！&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var Scope = function( ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.$$watchers = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Scope.prototype.$watch = function( watchExp, listener ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.$$watchers.push( &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        watchExp: watchExp,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        listener: listener || function() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Scope.prototype.$digest = function( ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var dirty;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    do &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            dirty = false;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for( var i = 0; i &amp;lt; this.$$watchers.length; i++ ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                var newValue = this.$$watchers[i].watchExp(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    oldValue = this.$$watchers[i].last;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                if( oldValue !== newValue ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    this.$$watchers[i].listener(newValue, oldValue);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    dirty = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    this.$$watchers[i].last = newValue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; while(dirty);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var $scope = new Scope();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$scope.name = &amp;apos;Ryan&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var element = document.querySelectorAll(&amp;apos;input&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;element[0].onkeyup = function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $scope.name = element[0].value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $scope.$digest();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$scope.$watch(function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return $scope.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, function( newValue, oldValue ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;Input value updated - it is now &amp;apos; + newValue);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    element[0].value = $scope.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var updateScopeValue = function updateScopeValue( ) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $scope.name = &amp;apos;Bob&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $scope.$digest();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ryanclark.me/how-angularjs-implements-dirty-checking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RyanClark:How AngularJS implements dirty checking and how to replicate it ourselves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9682092/how-does-data-binding-work-in-angularjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow:How does data binding work in AngularJS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xufei/blog/issues/10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;徐飞:Angular沉思录（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://angular-tips.com/blog/2013/08/watch-how-the-apply-runs-a-digest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angular-tips:$watch How the $apply Runs a $digest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/opensource/os-cn-AngularJS/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IBM developerWorks:AngularJS 作用域与数据绑定机制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;AngularJS可以记住value值并且会把它和之前的value值进行比较。这就是基本的脏检查机制。如果某处的value值发生了变化，那么AngularJS就会触发指定事件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$apply()&lt;/code&gt;这个方法是用来处理AngularJS框架之外的表达式的，与它相辅相成的还有&lt;code&gt;$digest()&lt;/code&gt;方法。一次digest就是一次完全的脏检查，它可以运行在所有的浏览器中。&lt;/p&gt;
&lt;h3 id=&quot;关于-watch&quot;&gt;&lt;a href=&quot;#关于-watch&quot; class=&quot;headerlink&quot; title=&quot;关于$watch&quot;&gt;&lt;/a&gt;关于$watch&lt;/h3&gt;&lt;p&gt;每一次你在UI中绑定什么东西时你就会往&lt;code&gt;$watch&lt;/code&gt;的队列中插入一条&lt;code&gt;$watch&lt;/code&gt;，想象一下$watch就是在所监测的model中可以侦查数据变化的东西。比如说：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;User: &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;user&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Password: &amp;lt;input type=&amp;quot;password&amp;quot; ng-model=&amp;quot;pass&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里我们分别给两个input绑定了$scope.user和$scope.pass，就是说我们向$watch队列添加了两个$watch。&lt;/p&gt;
    
    </summary>
    
      <category term="front-end javascript" scheme="http://mechanicianw.github.io/categories/front-end-javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Viewport-Percentage (or Viewport-Relative) Lengths</title>
    <link href="http://mechanicianw.github.io/2016/03/17/vieport-percentage/"/>
    <id>http://mechanicianw.github.io/2016/03/17/vieport-percentage/</id>
    <published>2016-03-17T11:16:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是视区百分比长度（viewport-percentage-lengths）？&quot;&gt;&lt;a href=&quot;#什么是视区百分比长度（viewport-percentage-lengths）？&quot; class=&quot;headerlink&quot; title=&quot;什么是视区百分比长度（viewport-percentage lengths）？&quot;&gt;&lt;/a&gt;什么是视区百分比长度（viewport-percentage lengths）？&lt;/h3&gt;&lt;p&gt;先看一下W3C给出的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The viewport-percentage lengths are relative to the size of the initial containing block. When the height or width of the initial containing block is changed, they are scaled accordingly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意为视区百分比长度是与其包含块的尺寸有关，并且是随之变化的。&lt;code&gt;initial containing block&lt;/code&gt;意为浏览器内部的可视区域，即&lt;code&gt;window.innerWidth/window.innerHeight&lt;/code&gt;大小，不包含任务栏标题栏以及底部工具栏的浏览器区域大小。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;视区单位有&lt;code&gt;vh&lt;/code&gt; (相对于视区高度), &lt;code&gt;vw&lt;/code&gt;(相对于视区宽度), &lt;code&gt;vmin&lt;/code&gt; (相对于视区高度或宽度，取决于哪个更小) and &lt;code&gt;vmax&lt;/code&gt; (类似于vw但取决于哪个更大)。&lt;/p&gt;
&lt;h3 id=&quot;它是如何分配浏览器高度的？&quot;&gt;&lt;a href=&quot;#它是如何分配浏览器高度的？&quot; class=&quot;headerlink&quot; title=&quot;它是如何分配浏览器高度的？&quot;&gt;&lt;/a&gt;它是如何分配浏览器高度的？&lt;/h3&gt;&lt;p&gt;我们可以假借&lt;code&gt;vh&lt;/code&gt;: &lt;code&gt;1vh&lt;/code&gt;相当于1%的视区高度，忽略元素在DOM树中的位置，100vh相当于浏览器内部可视区域的高度。&lt;/p&gt;
&lt;h3 id=&quot;浏览器兼容性？&quot;&gt;&lt;a href=&quot;#浏览器兼容性？&quot; class=&quot;headerlink&quot; title=&quot;浏览器兼容性？&quot;&gt;&lt;/a&gt;浏览器兼容性？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/98A8FA40-23DE-4D3B-AE9B-A434F44A5AA0.png&quot; alt=&quot;caniuse&quot;&gt;&lt;/p&gt;
&lt;p&gt;在css属性可用性查询网站&lt;a href=&quot;http://caniuse.com/#search=viewport%20units&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;caniuse&lt;/a&gt;中我们查到了，目前主流浏览器对于视区单位的支持性，从中我们可以看出，&lt;strong&gt;Chrome 20+, IE9+ ,FireFox19+以及Safari6&lt;/strong&gt; 都是支持的。&lt;/p&gt;
&lt;h3 id=&quot;100vh与100-的区别？&quot;&gt;&lt;a href=&quot;#100vh与100-的区别？&quot; class=&quot;headerlink&quot; title=&quot;100vh与100%的区别？&quot;&gt;&lt;/a&gt;100vh与100%的区别？&lt;/h3&gt;&lt;p&gt;我们知道，vh是相对于视区高度的单位，所以100vh被设置的高度永远是相对于&lt;code&gt;window.innerWidth/window.innerHeight&lt;/code&gt;的。而被设置成百分比高度的标签，它的实际高度要取决于其父标签（块级）&lt;br&gt;就像这个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body style=&amp;quot;height:100%&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;div style=&amp;quot;height:200px&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;p style=&amp;quot;height:100%; display:block;&amp;quot;&amp;gt;Hello, world!&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然p标签设置了高度为100％，但是其外部div的高度为200px，因此这个p标签的实际高度只是200px&lt;/p&gt;
&lt;h3 id=&quot;如何用百分比实现同vh一样的效果？&quot;&gt;&lt;a href=&quot;#如何用百分比实现同vh一样的效果？&quot; class=&quot;headerlink&quot; title=&quot;如何用百分比实现同vh一样的效果？&quot;&gt;&lt;/a&gt;如何用百分比实现同vh一样的效果？&lt;/h3&gt;&lt;p&gt;某些情况下，&lt;code&gt;vw&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;所产生的效果与百分比&lt;code&gt;%单位&lt;/code&gt;无异，尤其对于&lt;code&gt;absolute/fixed&lt;/code&gt;定位属性的元素。比如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    position: fixed;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    top: 100%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    top: 100vh;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    left: 5%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    left: 5vw;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    right: 5%;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    right: 5vw;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;支持vh, vw单位的浏览器就会使用视区单位（因为在后面声明）；不支持的就是要百分比%单位。&lt;/p&gt;
&lt;h3 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1575141/make-div-100-height-of-browser-window&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;James Donnelly__stackoverflow&lt;/a&gt;:视区单位布道&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2012/09/new-viewport-relative-units-vw-vh-vm-vmin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视区相关单位_张鑫旭博客&lt;/a&gt;:更多相关与视区单位应用场景的尝试&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/xiaopin/archive/2012/03/26/2418152.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JS,Jquery获取各种屏幕的宽度和高度&lt;/a&gt;:复习一下有关屏幕高度的知识&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是视区百分比长度（viewport-percentage-lengths）？&quot;&gt;&lt;a href=&quot;#什么是视区百分比长度（viewport-percentage-lengths）？&quot; class=&quot;headerlink&quot; title=&quot;什么是视区百分比长度（viewport-percentage lengths）？&quot;&gt;&lt;/a&gt;什么是视区百分比长度（viewport-percentage lengths）？&lt;/h3&gt;&lt;p&gt;先看一下W3C给出的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The viewport-percentage lengths are relative to the size of the initial containing block. When the height or width of the initial containing block is changed, they are scaled accordingly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意为视区百分比长度是与其包含块的尺寸有关，并且是随之变化的。&lt;code&gt;initial containing block&lt;/code&gt;意为浏览器内部的可视区域，即&lt;code&gt;window.innerWidth/window.innerHeight&lt;/code&gt;大小，不包含任务栏标题栏以及底部工具栏的浏览器区域大小。&lt;/p&gt;
    
    </summary>
    
      <category term="front-end css" scheme="http://mechanicianw.github.io/categories/front-end-css/"/>
    
    
  </entry>
  
  <entry>
    <title>[译]JavaScript最佳实践：提高代码质量的技巧和建议</title>
    <link href="http://mechanicianw.github.io/2016/03/13/trans-javascript-code-tips/"/>
    <id>http://mechanicianw.github.io/2016/03/13/trans-javascript-code-tips/</id>
    <published>2016-03-13T08:24:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;p&gt;原文地址：&lt;a href=&quot;https://www.codementor.io/javascript/tutorial/javascript-best-practices&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codementor.io/javascript/tutorial/javascript-best-practices&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.filepicker.io/api/file/e4jxgEgHRzS1zQU6aJLR&quot; alt=&quot;image&quot;&gt;&lt;br&gt;每天学习新知识可以让我们变成一个更优秀更理性的人。作为一名开发者，持续学习也是我们工作的一部分，无论如何，这些新知识的学习过程都是积极有益的经验积累。&lt;/p&gt;
&lt;p&gt;在这篇教程中，我会提出一些JavaScript的最佳实践，你就不会觉得学习起来很困难了。准备好了就来一起升级你的代码吧！&lt;/p&gt;
&lt;h3 id=&quot;1-避免污染全局作用域&quot;&gt;&lt;a href=&quot;#1-避免污染全局作用域&quot; class=&quot;headerlink&quot; title=&quot;1.避免污染全局作用域&quot;&gt;&lt;/a&gt;1.避免污染全局作用域&lt;/h3&gt;&lt;p&gt;声明变量的过程中有很多有趣的地方。有的时候，你可能在不知情的情况下却声明了一个&lt;code&gt;全局变量&lt;/code&gt;。在现代浏览器中，全局变量会被储存在&lt;code&gt;window&lt;/code&gt;对象中，因此会有很多内容运行在其中，你不知情声明的全局变量可能会覆盖掉一些默认值。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们假设你有一个包含&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的HTML文件（或者是其中引入了JavaScript文件）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var foo = 42;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(foo);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很明显，控制台会打印出&lt;code&gt;42&lt;/code&gt;，但是如果这段代码不是执行在函数中的话，这一段执行上下文就会变成全局的。因此，这个变量&lt;code&gt;foo&lt;/code&gt;也会被绑定在&lt;code&gt;window&lt;/code&gt;对象上，意味着&lt;code&gt;window.foo&lt;/code&gt;也是&lt;code&gt;42&lt;/code&gt;。这样是很危险的，你可能覆盖掉了已经存在的全局变量。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function print () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // do something&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当执行&lt;code&gt;windos.print&lt;/code&gt;（或者&lt;code&gt;print&lt;/code&gt;）时，由于我们已经覆盖了原生的print函数，浏览器就不会弹出打印窗口了。&lt;/p&gt;
&lt;p&gt;解决方法很简单；我们需要一个叫做&lt;code&gt;立即执行函数&lt;/code&gt;的包装函数，如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// Declare an anonymous function&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   var foo = 42;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   console.log(window.foo);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // → undefined&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   console.log(foo);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // → 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//^ and call it immediately&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了这种解决方法，你也可以选择把&lt;code&gt;window&lt;/code&gt;和其它全局对象（如&lt;code&gt;document&lt;/code&gt;）作为参数传递给函数（这样可能会提升性能）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(function (global, doc) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  global.setTimeout(function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     doc.body.innerHTML = &amp;quot;Hello!&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, 1000);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)(window, document);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，你要用包裹函数避免创建全局变量。注意一点，我不会在代码段中使用包裹函数，因为我们是要专注于代码本身。&lt;/p&gt;
&lt;p&gt;Tip: &lt;a href=&quot;http://browserify.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模块打包工具browserify&lt;/a&gt;是避免创建全局变量的又一种方法。它以与Node.js同样的方式使用&lt;code&gt;require&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;多说一点，Node.js通过函数来自动包裹你的文件。它们看起来就像这样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(function (exports, require, module, __filename, __dirname) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// ...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可能你觉得&lt;code&gt;require&lt;/code&gt;函数也是全局的，然而它并不是。它只不过是一个函数参数。&lt;/p&gt;
&lt;h4 id=&quot;Did-you-know&quot;&gt;&lt;a href=&quot;#Did-you-know&quot; class=&quot;headerlink&quot; title=&quot;Did you know?&quot;&gt;&lt;/a&gt;Did you know?&lt;/h4&gt;&lt;p&gt;尽管&lt;code&gt;window&lt;/code&gt;对象其中包含着全局变量，它本身也是个全局变量，&lt;code&gt;window&lt;/code&gt;内部指向的是它本身：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;window.window.window&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// =&amp;gt; Window&amp;#123;...&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是因为&lt;code&gt;window&lt;/code&gt;是一个循环对象。想要创建一个循环对象的话可以参考：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 创建一个对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var foo = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//给对象本身赋值一个属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo.bar = foo;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// foo就变成了一个循环对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo.bar.bar.bar.bar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → foo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以你可以这样表白你对JavaScripte无限的爱了：&lt;br&gt;&lt;img src=&quot;https://www.filepicker.io/api/file/ZMNjGIiQ52IKsseTjqno&quot; alt=&quot;circle&quot;&gt;&lt;br&gt;你就可以像这样无限扩展这个Object（直到浏览器崩溃）&lt;/p&gt;
&lt;h3 id=&quot;2-使用’use-strict’的好处&quot;&gt;&lt;a href=&quot;#2-使用’use-strict’的好处&quot; class=&quot;headerlink&quot; title=&quot;2.使用’use strict’的好处&quot;&gt;&lt;/a&gt;2.使用’use strict’的好处&lt;/h3&gt;&lt;p&gt;严格使用&lt;code&gt;use strict&lt;/code&gt;！没有什么方法比把这行代码添在JavaScript里可以让你的代码更magic了。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//  糟糕的写法，会让你在不知情的情况下创建了全局变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   a = 42;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   console.log(a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // → 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → 42&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置严格模式，你就会得到报错信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;quot;use strict&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   a = 42;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // Error: Uncaught ReferenceError: a is not defined&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可能想知道为什么你不能把&lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;写在包裹函数外面。事实上，可以写在外面，严格模式就会在全局应用。这么什么不好的，但是要注意如果代码引入了第三方库，或是要打包到一个文件的时候，全局应用可能会造成影响。&lt;/p&gt;
&lt;h3 id=&quot;3-严格等于&quot;&gt;&lt;a href=&quot;#3-严格等于&quot; class=&quot;headerlink&quot; title=&quot;3.严格等于 ===&quot;&gt;&lt;/a&gt;3.严格等于 ===&lt;/h3&gt;&lt;p&gt;如果你想用&lt;code&gt;==&lt;/code&gt;来比较a和b的话，在JavaScript中你可能会发现它的结果有点奇怪：如果你比较的是字符串和数字，它们也会是相等的（&lt;code&gt;==&lt;/code&gt;）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;42&amp;quot; == 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显然，用严格等于（&lt;code&gt;===&lt;/code&gt;）更好&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;42&amp;quot; === 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// false&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-用-amp-amp-和-魔法&quot;&gt;&lt;a href=&quot;#4-用-amp-amp-和-魔法&quot; class=&quot;headerlink&quot; title=&quot;4.用&amp;amp;&amp;amp;和||魔法&quot;&gt;&lt;/a&gt;4.用&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;和&lt;code&gt;||&lt;/code&gt;魔法&lt;/h3&gt;&lt;p&gt;在日常工作中，你可以发现用逻辑操作符缩短你的代码&lt;/p&gt;
&lt;p&gt;默认&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;&amp;quot; || &amp;quot;foo&amp;quot;   // → &amp;quot;foo&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;undefined || 42   // → 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//注意一下，如果你想通过这种方式来处理0的话，你要检查它是0还是未赋值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var a = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a || 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 三元表达式看起来就像是一行结构的if-else语句&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var b = typeof a === &amp;quot;number&amp;quot; ? a : 42;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不需要用if表达式来判断布尔值，你可以简单地这样处理：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;expr &amp;amp;&amp;amp; doSomething();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Instead of:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if (expr) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   doSomething();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上例中如果我们需要&lt;code&gt;doSomething()&lt;/code&gt;来返回结果的话，使用逻辑操作符会看起来更带感：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function doSomething () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return &amp;#123; foo: &amp;quot;bar&amp;quot; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var expr = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var res = expr &amp;amp;&amp;amp; doSomething();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;res &amp;amp;&amp;amp; console.log(res);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → &amp;#123; foo: &amp;quot;bar&amp;quot; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个问题上你可能会有异议，但使用逻辑操作符确实是更理想的方式。可能你认为用这种方法是“丑化”代码，但那些代码压缩器却真的在这样做。&lt;/p&gt;
&lt;p&gt;尽管代码变短了，它的可读性却依然很好。&lt;/p&gt;
&lt;h3 id=&quot;5-改变变量类型&quot;&gt;&lt;a href=&quot;#5-改变变量类型&quot; class=&quot;headerlink&quot; title=&quot;5.改变变量类型&quot;&gt;&lt;/a&gt;5.改变变量类型&lt;/h3&gt;&lt;p&gt;取决于实际场景，有很多改变变量类型的方法，如下是最常用的方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// anything =》 number&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var foo = &amp;quot;42&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var myNumber = +foo; // shortcut for Number(foo)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Tip: 可以直接把它变成负数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var negativeFoo = -foo; // or -Number(foo)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → -42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// object =&amp;gt; array&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Tip: `arguments` 是一个对象但通常被用作为数组&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var args = &amp;#123; 0: &amp;quot;foo&amp;quot;, 1: &amp;quot;bar&amp;quot;, length: 2 &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Array.prototype.slice.call(args)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → [ &amp;apos;foo&amp;apos;, &amp;apos;bar&amp;apos; ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Anything =》 boolean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 两次取非可以使它变成布尔值&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var t = 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var f = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;!!t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;!!f&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 一次取非&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;!t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;!f&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Anything =》 string&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var foo = 42;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;&amp;quot; + foo // 转变为字符串的简短方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → &amp;quot;42&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo = &amp;#123; hello: &amp;quot;world&amp;quot; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JSON.stringify(foo);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// → &amp;apos;&amp;#123; &amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot; &amp;#125;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JSON.stringify(foo, null, 4); // 美化代码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// →&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// &amp;apos;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//    &amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// &amp;#125;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 注意一点，不可以 JSON.stringify 环形结构的对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JSON.stringify(window);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// ⚠ TypeError: JSON.stringify cannot serialize cyclic structures.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-代码风格指南&quot;&gt;&lt;a href=&quot;#6-代码风格指南&quot; class=&quot;headerlink&quot; title=&quot;6.代码风格指南&quot;&gt;&lt;/a&gt;6.代码风格指南&lt;/h3&gt;&lt;p&gt;新项目中在不同文件里应该遵循同样的代码风格，对于老项目，就沿用旧的代码风格，除非你下定决心去整体改掉陈旧代码的风格（要和同事讨论之后再决定）。只要你确定了代码风格，就要一直遵循它。&lt;/p&gt;
&lt;p&gt;这是一些可参考的代码风格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;aribnb/javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/IonicaBizau/code-style&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;my code-style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;额外提示&quot;&gt;&lt;a href=&quot;#额外提示&quot; class=&quot;headerlink&quot; title=&quot;额外提示&quot;&gt;&lt;/a&gt;额外提示&lt;/h3&gt;&lt;p&gt;在其它一些JavaScript最佳实践中可以发现有一些有助于编码的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/beautify-web/js-beautify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js-beautify&lt;/a&gt;:美化代码&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mishoo/UglifyJS2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UglifyJS(2)&lt;/a&gt;:压缩代码&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jshint/jshint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jshint&lt;/a&gt;:检测代码中的错误&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jscs.info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jscs&lt;/a&gt;:可扩展的风格检测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后一件事，好好&lt;a href=&quot;https://www.codementor.io/learn-programming/what-to-do-when-your-website-is-broken&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;debug&lt;/a&gt;,而不是用&lt;code&gt;console.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;祝编码愉快！&lt;/p&gt;
&lt;h3 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codementor.io/javascript/tutorial/how-to-learn-javascript-properly&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;初学者指南：学习JavaScript的最佳方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codementor.io/javascript/tutorial/top-ten-things-beginners-must-know-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于JavaScript初学者必知的十件事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codementor.io/learn-programming/javascript-trends-skills-developers-should-learn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在2016年JavaScript开发者需要学习的技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codementor.io/javascript/tutorial/4-easy-ways-to-start-using-es2015&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4种开始使用ES2015的方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最重要的21道面试题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文地址：&lt;a href=&quot;https://www.codementor.io/javascript/tutorial/javascript-best-practices&quot;&gt;https://www.codementor.io/javascript/tutorial/javascript-best-practices&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.filepicker.io/api/file/e4jxgEgHRzS1zQU6aJLR&quot; alt=&quot;image&quot;&gt;&lt;br&gt;每天学习新知识可以让我们变成一个更优秀更理性的人。作为一名开发者，持续学习也是我们工作的一部分，无论如何，这些新知识的学习过程都是积极有益的经验积累。&lt;/p&gt;
&lt;p&gt;在这篇教程中，我会提出一些JavaScript的最佳实践，你就不会觉得学习起来很困难了。准备好了就来一起升级你的代码吧！&lt;/p&gt;
&lt;h3 id=&quot;1-避免污染全局作用域&quot;&gt;&lt;a href=&quot;#1-避免污染全局作用域&quot; class=&quot;headerlink&quot; title=&quot;1.避免污染全局作用域&quot;&gt;&lt;/a&gt;1.避免污染全局作用域&lt;/h3&gt;&lt;p&gt;声明变量的过程中有很多有趣的地方。有的时候，你可能在不知情的情况下却声明了一个&lt;code&gt;全局变量&lt;/code&gt;。在现代浏览器中，全局变量会被储存在&lt;code&gt;window&lt;/code&gt;对象中，因此会有很多内容运行在其中，你不知情声明的全局变量可能会覆盖掉一些默认值。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://mechanicianw.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Cookie, LocalStorage 与 SessionStorage</title>
    <link href="http://mechanicianw.github.io/2016/03/10/cookie-localstorage-session/"/>
    <id>http://mechanicianw.github.io/2016/03/10/cookie-localstorage-session/</id>
    <published>2016-03-10T07:02:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;p&gt;有关Cookie, LocalStorage 与 SessionStorage的基本概念，区别，共同点，各自的应用场景。&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h3&gt;&lt;p&gt;Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递，是随HTTP请求一起被传递的额外数据。主要用途有保存登陆信息，大多数浏览器支持最大为 4096 字节的 Cookie&lt;/p&gt;
&lt;h3 id=&quot;localStorage&quot;&gt;&lt;a href=&quot;#localStorage&quot; class=&quot;headerlink&quot; title=&quot;localStorage&quot;&gt;&lt;/a&gt;localStorage&lt;/h3&gt;&lt;p&gt;localStorage 是 HTML5 标准中新加入的技术,大小限制在500万字符左右，各个浏览器不一致。永久有效，即不主动清空的话就不会消失，即使保存的数据超出了浏览器所规定的大小，也不会把旧数据清空而只会报错。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;sessionStorage&quot;&gt;&lt;a href=&quot;#sessionStorage&quot; class=&quot;headerlink&quot; title=&quot;sessionStorage&quot;&gt;&lt;/a&gt;sessionStorage&lt;/h3&gt;&lt;p&gt;sessionStorage是在同源的同窗口（或tab）中，始终存在的数据。sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。当页面关闭后，sessionStorage 中的数据就会被清空。&lt;/p&gt;
&lt;table&gt;&lt;br&gt;    &lt;tr&gt;&lt;br&gt;        &lt;th&gt;特性&lt;/th&gt;&lt;br&gt;        &lt;th&gt;Chorme&lt;/th&gt;&lt;br&gt;        &lt;th&gt;Firefox&lt;/th&gt;&lt;br&gt;        &lt;th&gt;IE&lt;/th&gt;&lt;br&gt;        &lt;td&gt;Opera&lt;/td&gt;&lt;br&gt;        &lt;td&gt;Safari&lt;/td&gt;&lt;br&gt;    &lt;/tr&gt;&lt;br&gt;    &lt;tr&gt;&lt;br&gt;        &lt;td&gt;localStorage&lt;/td&gt;&lt;br&gt;        &lt;td&gt;4&lt;/td&gt;&lt;br&gt;        &lt;td&gt;3.5&lt;/td&gt;&lt;br&gt;        &lt;td&gt;8&lt;/td&gt;&lt;br&gt;        &lt;td&gt;10.5&lt;/td&gt;&lt;br&gt;        &lt;td&gt;4&lt;/td&gt;&lt;br&gt;    &lt;/tr&gt;&lt;br&gt;    &lt;tr&gt;&lt;br&gt;        &lt;td&gt;sessionStorage&lt;/td&gt;&lt;br&gt;        &lt;td&gt;5&lt;/td&gt;&lt;br&gt;        &lt;td&gt;2&lt;/td&gt;&lt;br&gt;        &lt;td&gt;8&lt;/td&gt;&lt;br&gt;        &lt;td&gt;10.5&lt;/td&gt;&lt;br&gt;        &lt;td&gt;4&lt;/td&gt;&lt;br&gt;    &lt;/tr&gt;&lt;br&gt;&lt;/table&gt;

&lt;h2 id=&quot;共同点&quot;&gt;&lt;a href=&quot;#共同点&quot; class=&quot;headerlink&quot; title=&quot;共同点&quot;&gt;&lt;/a&gt;共同点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;都是保存在浏览器端，而且同源。 &lt;/li&gt;
&lt;li&gt;三者都是键值对的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;cookie由服务端生成，用于标识用户身份；而两个storage用于浏览器端缓存数据&lt;/li&gt;
&lt;li&gt;如果保存了cookie的话，http请求中一定会带上；而两个storage可以由脚本选择性的提交&lt;/li&gt;
&lt;li&gt;存储大小限制不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。&lt;/li&gt;
&lt;li&gt;数据生命期不同。sessionStorage会在会话结束后销毁；而localStorage会永久保存直到覆盖。cookie会在过期时间之后销毁。&lt;/li&gt;
&lt;li&gt;安全性方面，cookie中最好不要放置任何明文的东西。两个storage的数据提交后在服务端一定要校验。&lt;/li&gt;
&lt;li&gt;作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 和cookie在所有同源窗口中都是共享的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;每个HTTP请求都会带着cookie的信息，若cookie中包含大量数据则浪费了过多带宽。大多数情况下，cookie都用来存储身份校验，会话，广告踪迹等token。&lt;/li&gt;
&lt;li&gt;由于locakStorage和sessionStorage所存储的数据是容易读取和更改的，所以它们更适合存储那些不明感的，与安全性无关的数据。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有关Cookie, LocalStorage 与 SessionStorage的基本概念，区别，共同点，各自的应用场景。&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h3&gt;&lt;p&gt;Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递，是随HTTP请求一起被传递的额外数据。主要用途有保存登陆信息，大多数浏览器支持最大为 4096 字节的 Cookie&lt;/p&gt;
&lt;h3 id=&quot;localStorage&quot;&gt;&lt;a href=&quot;#localStorage&quot; class=&quot;headerlink&quot; title=&quot;localStorage&quot;&gt;&lt;/a&gt;localStorage&lt;/h3&gt;&lt;p&gt;localStorage 是 HTML5 标准中新加入的技术,大小限制在500万字符左右，各个浏览器不一致。永久有效，即不主动清空的话就不会消失，即使保存的数据超出了浏览器所规定的大小，也不会把旧数据清空而只会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="front-end javascript" scheme="http://mechanicianw.github.io/categories/front-end-javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>有关闭包，作用域，this对象</title>
    <link href="http://mechanicianw.github.io/2016/01/02/learning-clouser-scope/"/>
    <id>http://mechanicianw.github.io/2016/01/02/learning-clouser-scope/</id>
    <published>2016-01-02T08:51:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;首先看一下维基百科中，闭包的概念：&quot;&gt;&lt;a href=&quot;#首先看一下维基百科中，闭包的概念：&quot; class=&quot;headerlink&quot; title=&quot;首先看一下维基百科中，闭包的概念：&quot;&gt;&lt;/a&gt;首先看一下维基百科中，闭包的概念：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。&lt;br&gt;闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;在创建函数和调用函数时，都发生了什么&quot;&gt;&lt;a href=&quot;#在创建函数和调用函数时，都发生了什么&quot; class=&quot;headerlink&quot; title=&quot;在创建函数和调用函数时，都发生了什么&quot;&gt;&lt;/a&gt;在创建函数和调用函数时，都发生了什么&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建函数时&lt;ol&gt;
&lt;li&gt;创建了预先包含全局变量对象的作用域链&lt;/li&gt;
&lt;li&gt;该作用域链保存在内部[[scope]]属性中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;调用函数时&lt;ol&gt;
&lt;li&gt;创建执行环境&lt;/li&gt;
&lt;li&gt;复制函数[[scope]]属性中的对象构建作用域链&lt;/li&gt;
&lt;li&gt;用arguments与其它形参初始化函数的活动对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;要理解这句话：&lt;strong&gt;JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行的作用域里。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;再用计数器函数来看一个简单的闭包例子&quot;&gt;&lt;a href=&quot;#再用计数器函数来看一个简单的闭包例子&quot; class=&quot;headerlink&quot; title=&quot;再用计数器函数来看一个简单的闭包例子&quot;&gt;&lt;/a&gt;再用计数器函数来看一个简单的闭包例子&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function createCounter() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  var counter = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  function increment() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    counter = counter + 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;quot;Number of events: &amp;quot; + counter);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return increment;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var counter1 = createCounter();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var counter2 = createCounter();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;counter1(); // Number of events: 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;counter1(); // Number of events: 2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;counter2(); // Number of events: 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;counter1(); // Number of events: 3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数实现了分别计数的功能。&lt;br&gt;在createCounter()的最后一句：&lt;code&gt;return increment;&lt;/code&gt;我们返回了该局部函数。在这里并不是返回了increment()函数的调用结果，而是返回了该结果本身。&lt;br&gt;因此，在使用&lt;code&gt;var counter1 = createCounter();&lt;/code&gt;时，实际上，&lt;strong&gt;我们生成了一个新的函数&lt;/strong&gt;。&lt;br&gt;每个生成的函数，都会保持在 createCounter() 所创建的 counter 变量的引用。在某种意义上，被返回的函数记住了它所被创建时的环境。&lt;br&gt;&lt;strong&gt;内部变量 counter 都是独立存在于每个作用域！&lt;/strong&gt;例如，如果我们创建两个计数器，那么它们都会在闭包体内会分配一个新的 counter 变量。&lt;/p&gt;
&lt;h4 id=&quot;闭包的内存&quot;&gt;&lt;a href=&quot;#闭包的内存&quot; class=&quot;headerlink&quot; title=&quot;闭包的内存&quot;&gt;&lt;/a&gt;闭包的内存&lt;/h4&gt;&lt;p&gt;后台的每个执行环境都有一个表示变量的对象——变量对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局环境的变量对象始终存在&lt;/li&gt;
&lt;li&gt;像 createCounter()函数这样的局部变量，只在函数执行的过程中存在&lt;/li&gt;
&lt;li&gt;作用域链本质上是一个指向变量对象的指针列表，只引用但不包含变量对象&lt;/li&gt;
&lt;li&gt;&lt;em&gt;一般来讲&lt;/em&gt;当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局执行环境的变量对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;但闭包的情况有所不同：&lt;/em&gt;&lt;br&gt;内部定义的函数会把外部函数的活动对象添加到它的作用域链中。&lt;br&gt;当上述例子中createCounter()执行完毕后，它的活动对象也不会销毁，因为&lt;strong&gt;匿名函数的作用域链仍然在引用这个活动对象&lt;/strong&gt;。也就是说这个函数执行完毕后，虽然其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中。只有当匿名函数被销毁后，createCounter()的活动对象才会被销毁。&lt;br&gt;一个简单的构造闭包以及释放内存的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function outer () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	var name = &amp;apos;foo&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		console.log(name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var inner = outer();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;inner();  // foo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;inner = null;  // 解除对 outer 内部的匿名函数的引用，以便释放内存&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并且，闭包在IE低版本中会导致特殊的问题。如果闭包作用域链中保存着一个HTML元素，那么该元素将无法销毁。&lt;br&gt;由于闭包会携带包含它的函数的作用域，因此会比其它函数占用更多的内存，过度使用闭包可能会导致内存占用过多，所以要慎重使用闭包。&lt;/p&gt;
&lt;h4 id=&quot;闭包的陷阱：循环闭包&quot;&gt;&lt;a href=&quot;#闭包的陷阱：循环闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包的陷阱：循环闭包&quot;&gt;&lt;/a&gt;闭包的陷阱：循环闭包&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;请牢记一点：闭包只能取得包含函数中任何变量的最后一个值。&lt;/strong&gt;&lt;br&gt;因此，下面这个例子只会返回同一个值。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function foo()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  var result = new Array();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for(var i=0; i&amp;lt;10; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    result[i] = function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      return i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表面上看，每个函数都会返回自己的索引值，但实际上，每个函数都会返回10.因为事件处理器函数绑定了变量i本身，foo()执行完毕后，每个函数内的i的值都是10.&lt;br&gt;应改为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function foo()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  var result = new Array();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for(var i=0; i&amp;lt;10; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    result[i] = function(num)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      return function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return num&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里，我们定义了一个匿名函数，把匿名函数的结果赋值给数组。&lt;br&gt;匿名函数的参数num就是最终函数要返回的值，在调用每个匿名函数时，我们都把当前i的值赋给了num，匿名函数内部的闭包又可以访问到num，因此result数组里的每个函数都有自己的num变量的副本，就可以返回不同的值了。&lt;/p&gt;
&lt;p&gt;换个应用场景，如果想循环若干个节点，在这个for循环里绑定onclick，使每个节点被点击时都会打印其对应的索引值。&lt;br&gt;代码简化如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var arr = new Array();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for (var i = 0; i &amp;lt; 50; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  (function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr[i] = document.createElement(&amp;apos;i&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr[i].index = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arr[i].onclick = function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(this.index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;arr[i].index = i;&lt;/code&gt;这一句很关键，如果省略的话，onclick函数执行时作用域里没有i这个变量，只能一直向上查找，最后打印出50&lt;/p&gt;
&lt;h4 id=&quot;闭包中的this对象&quot;&gt;&lt;a href=&quot;#闭包中的this对象&quot; class=&quot;headerlink&quot; title=&quot;闭包中的this对象&quot;&gt;&lt;/a&gt;闭包中的this对象&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;匿名函数的执行环境具有全局性，因此其this对象通常指向window&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var name = &amp;quot;The Window&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　var object = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　name : &amp;quot;My Object&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　getNameFunc : function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　  return function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　　　 return this.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　　&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(object.getNameFunc()()); // “The Window”&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;内部函数在搜索&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;arguments&lt;/code&gt;这两个变量时，只会搜索到其活动对象为止，永远不可能直接访问外部函数中的这两个变量。&lt;/p&gt;
&lt;h3 id=&quot;关于this关键字&quot;&gt;&lt;a href=&quot;#关于this关键字&quot; class=&quot;headerlink&quot; title=&quot;关于this关键字&quot;&gt;&lt;/a&gt;关于this关键字&lt;/h3&gt;&lt;p&gt;在《JavaScripts语言精粹》中，把this的出现场景分为四种：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有对象就指向调用对象&lt;/p&gt;
&lt;p&gt;没调用对象就指向全局对象&lt;/p&gt;
&lt;p&gt;用new构造就指向新对象&lt;/p&gt;
&lt;p&gt;通过 apply 或 call 或 bind 来改变 this 的所指。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-全局的this-window&quot;&gt;&lt;a href=&quot;#1-全局的this-window&quot; class=&quot;headerlink&quot; title=&quot;1.全局的this===window&quot;&gt;&lt;/a&gt;1.全局的this===window&lt;/h4&gt;&lt;h4 id=&quot;2-作为对象方法的函数的this指向这个上级对象&quot;&gt;&lt;a href=&quot;#2-作为对象方法的函数的this指向这个上级对象&quot; class=&quot;headerlink&quot; title=&quot;2.作为对象方法的函数的this指向这个上级对象&quot;&gt;&lt;/a&gt;2.作为对象方法的函数的this指向这个上级对象&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var o =&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  prop:37;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  f:function()&amp;#123;return this.prop&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(o.f()); //37&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-构造函数调用，this指向其生成的新对象&quot;&gt;&lt;a href=&quot;#3-构造函数调用，this指向其生成的新对象&quot; class=&quot;headerlink&quot; title=&quot;3.构造函数调用，this指向其生成的新对象&quot;&gt;&lt;/a&gt;3.构造函数调用，this指向其生成的新对象&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;window. x = 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function test(m)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　this.x = m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var o = new test(5);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(x); //5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-apply-和-call-调用以及-bind-绑定&quot;&gt;&lt;a href=&quot;#4-apply-和-call-调用以及-bind-绑定&quot; class=&quot;headerlink&quot; title=&quot;4.apply 和 call 调用以及 bind 绑定&quot;&gt;&lt;/a&gt;4.apply 和 call 调用以及 bind 绑定&lt;/h4&gt;&lt;p&gt;全局函数apply和call可以用来改变函数中this的指向，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 定义一个全局函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   function foo() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       console.log(this.fruit);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; // 定义一个全局变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   var fruit = &amp;quot;apple&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // 自定义一个对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   var pack = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       fruit: &amp;quot;orange&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 等价于window.foo();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   foo.apply(window);  // &amp;quot;apple&amp;quot;,此时this等于window&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // 此时foo中的this === pack&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   foo.apply(pack);    // &amp;quot;orange&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先看一下维基百科中，闭包的概念：&quot;&gt;&lt;a href=&quot;#首先看一下维基百科中，闭包的概念：&quot; class=&quot;headerlink&quot; title=&quot;首先看一下维基百科中，闭包的概念：&quot;&gt;&lt;/a&gt;首先看一下维基百科中，闭包的概念：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。&lt;br&gt;闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;在创建函数和调用函数时，都发生了什么&quot;&gt;&lt;a href=&quot;#在创建函数和调用函数时，都发生了什么&quot; class=&quot;headerlink&quot; title=&quot;在创建函数和调用函数时，都发生了什么&quot;&gt;&lt;/a&gt;在创建函数和调用函数时，都发生了什么&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建函数时&lt;ol&gt;
&lt;li&gt;创建了预先包含全局变量对象的作用域链&lt;/li&gt;
&lt;li&gt;该作用域链保存在内部[[scope]]属性中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;调用函数时&lt;ol&gt;
&lt;li&gt;创建执行环境&lt;/li&gt;
&lt;li&gt;复制函数[[scope]]属性中的对象构建作用域链&lt;/li&gt;
&lt;li&gt;用arguments与其它形参初始化函数的活动对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="front-end javascript" scheme="http://mechanicianw.github.io/categories/front-end-javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>tips:编写邮件中的html文件</title>
    <link href="http://mechanicianw.github.io/2015/12/03/html-in-email/"/>
    <id>http://mechanicianw.github.io/2015/12/03/html-in-email/</id>
    <published>2015-12-03T09:31:00.000Z</published>
    <updated>2017-03-15T14:29:06.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在做的招聘模块里，有个需求是这样的，用户把中意的简历通过邮箱转发。&lt;/p&gt;
&lt;p&gt;如果直接发送现有的简历详情页的话，在邮件里无法正常显示，查阅了一些资料，最后又写了单独一版邮件用的html文件。&lt;br&gt;目前常见的邮箱客户端有Gmail，Outlook等，&lt;a href=&quot;https://www.campaignmonitor.com/css/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不同邮箱客户端对CSS样式的支持情况&lt;/a&gt;也不同。平时CSS样式一般写在header标签里或者外联一个CSS文件，但是在邮件中这些都会通通失效。&lt;br&gt;1.由于我们想要发送的内容是嵌套在客户端内的，所以它不会是完整的html文件，应该为&lt;div&gt;容器内的代码片段。并且由于邮箱自身设置了CSS样式，它可能会对我们的样式产生影响，所以我们应该尽量都使用行内样式。&lt;/div&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div style=&amp;quot;width:600px;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    内容区域&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.网页的布局必须使用表格&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div style=&amp;quot;text-align:center;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;table width=&amp;quot;600&amp;quot; cellpadding=&amp;quot;0&amp;quot; cellspacing=&amp;quot;0&amp;quot; border=&amp;quot;0&amp;quot; style=&amp;quot;margin:0 auto;&amp;quot;&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;div style=&amp;quot;width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;!-- 水平居中的邮件 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.在引入图片时需要注意，有的客户端会默认不显示图片，所以要确保图片不显示的情况下，也不会影响正文的阅读&lt;/p&gt;
&lt;p&gt;4.如果想测试自己写的html在邮件中效果，可以使用这个网站（&lt;a href=&quot;https://litmus.com/）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://litmus.com/）&lt;/a&gt;&lt;br&gt;这是我测试页面时的截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7ts2uaks.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720151202143934.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做的招聘模块里，有个需求是这样的，用户把中意的简历通过邮箱转发。&lt;/p&gt;
&lt;p&gt;如果直接发送现有的简历详情页的话，在邮件里无法正常显示，查阅了一些资料，最后又写了单独一版邮件用的html文件。&lt;br&gt;目前常见的邮箱客户端有Gmail，Outlook等，&lt;a href=&quot;https://www.campaignmonitor.com/css/&quot;&gt;不同邮箱客户端对CSS样式的支持情况&lt;/a&gt;也不同。平时CSS样式一般写在header标签里或者外联一个CSS文件，但是在邮件中这些都会通通失效。&lt;br&gt;1.由于我们想要发送的内容是嵌套在客户端内的，所以它不会是完整的html文件，应该为&lt;div&gt;容器内的代码片段。并且由于邮箱自身设置了CSS样式，它可能会对我们的样式产生影响，所以我们应该尽量都使用行内样式。&lt;/p&gt;
    
    </summary>
    
      <category term="front-end css" scheme="http://mechanicianw.github.io/categories/front-end-css/"/>
    
    
  </entry>
  
</feed>
