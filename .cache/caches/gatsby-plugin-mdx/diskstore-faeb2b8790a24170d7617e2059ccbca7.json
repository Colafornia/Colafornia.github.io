{"expireTime":9007200825610071000,"key":"gatsby-plugin-mdx-entire-payload-4035d1b5496bb47b527e2caa99063057-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"浏览器缓存就是将web资源保存在本地，就不用再每次都向服务器请求相同的资源。当下一个请求发起，如果是同样的url，浏览器会根据缓存机制来决定是读取本地的内容还是向服务器发送请求。显而易见，浏览器缓存可以减少带宽消耗，加快用户的访问速度同时减轻服务器压力。","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":128,"offset":128},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":128,"offset":128},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"浏览器的缓存机制主要分为两种，http协议定义的缓存机制和非http协议定义的缓存机制。后者主要通过在html文件中设置","position":{"start":{"line":4,"column":1,"offset":130},"end":{"line":4,"column":61,"offset":190},"indent":[]}},{"type":"inlineCode","value":"meta标签","position":{"start":{"line":4,"column":61,"offset":190},"end":{"line":4,"column":69,"offset":198},"indent":[]}},{"type":"text","value":"来实现。","position":{"start":{"line":4,"column":69,"offset":198},"end":{"line":4,"column":73,"offset":202},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":130},"end":{"line":4,"column":73,"offset":202},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"与缓存相关的首部字段","position":{"start":{"line":6,"column":4,"offset":207},"end":{"line":6,"column":14,"offset":217},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":204},"end":{"line":6,"column":14,"offset":217},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://o7ts2uaks.bkt.clouddn.com/CACHE.png","alt":"http首部字段","position":{"start":{"line":8,"column":1,"offset":219},"end":{"line":8,"column":56,"offset":274},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":219},"end":{"line":8,"column":56,"offset":274},"indent":[]}},{"type":"jsx","value":"<!--more-->","position":{"start":{"line":10,"column":1,"offset":276},"end":{"line":10,"column":12,"offset":287},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://o7ts2uaks.bkt.clouddn.com/w704.jpg","alt":"状态图","position":{"start":{"line":12,"column":1,"offset":289},"end":{"line":12,"column":50,"offset":338},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":289},"end":{"line":12,"column":50,"offset":338},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Pragma与Expires","position":{"start":{"line":13,"column":5,"offset":343},"end":{"line":13,"column":19,"offset":357},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":339},"end":{"line":13,"column":19,"offset":357},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"由上表可以看到，Pragma与Expires是http1.0中的内容，是早期的浏览器缓存策略，现在我们也会经常看到看到这两个字段，为的是http协议向下兼容。\nPragma属于通用首部字段，在请求和响应报文章都可以设置，一般要求Pragama指令设定在html文件中的","position":{"start":{"line":14,"column":1,"offset":358},"end":{"line":15,"column":55,"offset":492},"indent":[1]}},{"type":"inlineCode","value":"<meta>标签","position":{"start":{"line":15,"column":55,"offset":492},"end":{"line":15,"column":65,"offset":502},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":358},"end":{"line":15,"column":65,"offset":502},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"<meta http-equiv=\"Pragma\" content=\"no-cache\">","position":{"start":{"line":17,"column":1,"offset":504},"end":{"line":17,"column":48,"offset":551},"indent":[]}},{"type":"text","value":"\n不过Pragma一般只有在设置于响应报文中时才会生效。","position":{"start":{"line":17,"column":48,"offset":551},"end":{"line":18,"column":28,"offset":579},"indent":[1]}}],"position":{"start":{"line":17,"column":1,"offset":504},"end":{"line":18,"column":28,"offset":579},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Expires是响应头字段，用来启用缓存和规定缓存失效时间。Expires的值对应一个GMT时间，比如“Mon, 22 Jul 2002 11:12:01 GMT”来告诉浏览器资源缓存过期时间，如果还没过该时间点则不发请求。","position":{"start":{"line":20,"column":1,"offset":581},"end":{"line":20,"column":113,"offset":693},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":581},"end":{"line":20,"column":113,"offset":693},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果在meta标签中设置expires只是能设置页面在IE浏览器中是否缓存（对页面资源无效）。如果是在服务端报头返回Expires字段，则在任何浏览器中都能正确设置资源缓存的时间。需要注意的是，expires设置的缓存时间是相对服务器上时间而言的，如果客户端时间与服务器时间不一致，这个缓存也就没意义了。","position":{"start":{"line":22,"column":1,"offset":695},"end":{"line":22,"column":153,"offset":847},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":695},"end":{"line":22,"column":153,"offset":847},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"另外，同时设置Expires和Pragma的话，Pragma的优先级会更高。","position":{"start":{"line":24,"column":1,"offset":849},"end":{"line":24,"column":39,"offset":887},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":849},"end":{"line":24,"column":39,"offset":887},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Cache-Control","position":{"start":{"line":26,"column":5,"offset":893},"end":{"line":26,"column":18,"offset":906},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":889},"end":{"line":26,"column":18,"offset":906},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Cache-Control分别能在请求报文和响应报文中使用，来定义缓存有效时间，优先级高于Pragma与Expires。Cache-Control也修正了上述Expires时间差的问题。\n","position":{"start":{"line":28,"column":1,"offset":908},"end":{"line":29,"column":1,"offset":1002},"indent":[1]}},{"type":"image","title":null,"url":"http://ww3.sinaimg.cn/mw690/6941baebgw1eukzzwcvnij20gi089jvb.jpg","alt":"cache-control可设置的值","position":{"start":{"line":29,"column":1,"offset":1002},"end":{"line":29,"column":88,"offset":1089},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":908},"end":{"line":29,"column":88,"offset":1089},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Last-Modified","position":{"start":{"line":31,"column":5,"offset":1095},"end":{"line":31,"column":18,"offset":1108},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1091},"end":{"line":31,"column":18,"offset":1108},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"浏览器第一次请求某URL时会返回200，内容是所请求的资源。服务器将资源传递给客户端时，会将资源最后更改的时间以“Last-Modified: GMT”的形式加在实体首部上一起返回给客户端。","position":{"start":{"line":33,"column":1,"offset":1110},"end":{"line":33,"column":96,"offset":1205},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1110},"end":{"line":33,"column":96,"offset":1205},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"客户端会为资源标记上该信息，下次再次请求时，会把该信息附带在请求报文中一并带给服务器去做检查“If-Modified-Since: GMT”，若传递的时间值与服务器上该资源最终修改时间是一致的，则说明该资源没有被修改过，直接返回304状态码即可，内容为空，节省了传输数据量。","position":{"start":{"line":35,"column":1,"offset":1207},"end":{"line":35,"column":138,"offset":1344},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1207},"end":{"line":35,"column":138,"offset":1344},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"ETag","position":{"start":{"line":37,"column":5,"offset":1350},"end":{"line":37,"column":9,"offset":1354},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1346},"end":{"line":37,"column":9,"offset":1354},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Http1.1中定义了实体首部字段","position":{"start":{"line":39,"column":1,"offset":1356},"end":{"line":39,"column":18,"offset":1373},"indent":[]}},{"type":"inlineCode","value":"Etag","position":{"start":{"line":39,"column":18,"offset":1373},"end":{"line":39,"column":24,"offset":1379},"indent":[]}},{"type":"text","value":"，即在服务器响应时给请求的URL做标记一个唯一标识符，在响应头中传给客户端。在下一次发请求时，客户端会带上Etag，服务器通过比较服务器上资源的Etag与客户端传过来的Etag来判断资源有没有被修改。若没被修改，则返回304.","position":{"start":{"line":39,"column":24,"offset":1379},"end":{"line":39,"column":137,"offset":1492},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1356},"end":{"line":39,"column":137,"offset":1492},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果Last-Modified和ETag同时被使用，则要求它们的验证都必须通过才会返回304，若其中某个验证没通过，则服务器会按常规返回资源实体及200状态码。","position":{"start":{"line":41,"column":1,"offset":1494},"end":{"line":41,"column":81,"offset":1574},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1494},"end":{"line":41,"column":81,"offset":1574},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"缓存策略","position":{"start":{"line":43,"column":4,"offset":1579},"end":{"line":43,"column":8,"offset":1583},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1576},"end":{"line":43,"column":8,"offset":1583},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Last-Modified和Etag → 304","position":{"start":{"line":45,"column":5,"offset":1589},"end":{"line":45,"column":29,"offset":1613},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1585},"end":{"line":45,"column":29,"offset":1613},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"这两个字段经常在一起配合使用，来判断资源是否已被修改，确定读取本地缓存还是重新请求资源。ETag主要是用来解决Last-Modified无法解决的问题（文件修改频繁，服务器得到的时间不精确等等）。","position":{"start":{"line":47,"column":1,"offset":1615},"end":{"line":47,"column":99,"offset":1713},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1615},"end":{"line":47,"column":99,"offset":1713},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"这两个字段的特点及应用场景在于，本地已有缓存，但是它们需要向服务器发送请求来确定本地缓存是否是最新的，若服务器认为本地缓存是最新的，可用，则返回304","position":{"start":{"line":49,"column":1,"offset":1715},"end":{"line":49,"column":76,"offset":1790},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1715},"end":{"line":49,"column":76,"offset":1790},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Expires/Cache-Control → 200","position":{"start":{"line":51,"column":5,"offset":1796},"end":{"line":51,"column":32,"offset":1823},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1792},"end":{"line":51,"column":32,"offset":1823},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"区别于304状态码，200意味着不向服务器发请求，直接启用本地缓存。即Expires/Cache-Control字段通过绝对时间/相对时间判断出本地缓存是有效的。","position":{"start":{"line":53,"column":1,"offset":1825},"end":{"line":53,"column":82,"offset":1906},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1825},"end":{"line":53,"column":82,"offset":1906},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"思维导图如下（自己画的感觉很不美观 = =）","position":{"start":{"line":55,"column":1,"offset":1908},"end":{"line":55,"column":23,"offset":1930},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1908},"end":{"line":55,"column":23,"offset":1930},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://o7ts2uaks.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%20%281%29.png","alt":"思维导图","position":{"start":{"line":57,"column":1,"offset":1932},"end":{"line":57,"column":102,"offset":2033},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1932},"end":{"line":57,"column":102,"offset":2033},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"用户行为与缓存","position":{"start":{"line":59,"column":4,"offset":2038},"end":{"line":59,"column":11,"offset":2045},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2035},"end":{"line":59,"column":11,"offset":2045},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"浏览器缓存也与用户行为有关，在地址栏按回车与直接F5是不一样的。","position":{"start":{"line":61,"column":1,"offset":2047},"end":{"line":61,"column":33,"offset":2079},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2047},"end":{"line":61,"column":33,"offset":2079},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"http://ww4.sinaimg.cn/mw690/6941baebgw1eukzzr7rc2j20hg04kjsd.jpg","alt":"用户行为","position":{"start":{"line":63,"column":1,"offset":2081},"end":{"line":63,"column":74,"offset":2154},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2081},"end":{"line":63,"column":74,"offset":2154},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"由图可知，当用户按F5进行刷新，Expires/Cache-Control会失效，浏览器将再次发送请求通过Last-Modified/ETag来判断缓存是否有效。当用户通过Ctrl+F5进行强制刷新时，所有字段都会失效，浏览器将重新请求获取资源。","position":{"start":{"line":65,"column":1,"offset":2156},"end":{"line":65,"column":124,"offset":2279},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2156},"end":{"line":65,"column":124,"offset":2279},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"参考内容","position":{"start":{"line":67,"column":5,"offset":2285},"end":{"line":67,"column":9,"offset":2289},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":2281},"end":{"line":67,"column":9,"offset":2289},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html","children":[{"type":"text","value":"w3:HTTP1.1","position":{"start":{"line":68,"column":4,"offset":2293},"end":{"line":68,"column":14,"offset":2303},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":2292},"end":{"line":68,"column":72,"offset":2361},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":2292},"end":{"line":68,"column":72,"offset":2361},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2290},"end":{"line":68,"column":72,"offset":2361},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://www.cnblogs.com/vajoy/p/5341664.html","children":[{"type":"text","value":"vajoy:浅谈浏览器http的缓存机制","position":{"start":{"line":69,"column":4,"offset":2365},"end":{"line":69,"column":24,"offset":2385},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":2364},"end":{"line":69,"column":70,"offset":2431},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":2364},"end":{"line":69,"column":70,"offset":2431},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":2362},"end":{"line":69,"column":70,"offset":2431},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://www.laruence.com/2010/03/05/1332.html","children":[{"type":"text","value":"鸟哥:浏览器缓存机制","position":{"start":{"line":70,"column":4,"offset":2435},"end":{"line":70,"column":14,"offset":2445},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":2434},"end":{"line":70,"column":61,"offset":2492},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":2434},"end":{"line":70,"column":61,"offset":2492},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2432},"end":{"line":70,"column":61,"offset":2492},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://blog.csdn.net/eroswang/article/details/8302191","children":[{"type":"text","value":"eroswang:浏览器缓存详解","position":{"start":{"line":71,"column":4,"offset":2496},"end":{"line":71,"column":20,"offset":2512},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":2495},"end":{"line":71,"column":76,"offset":2568},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":2495},"end":{"line":71,"column":76,"offset":2568},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2493},"end":{"line":71,"column":76,"offset":2568},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2290},"end":{"line":71,"column":76,"offset":2568},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"关于浏览器缓存\",\"date\":\"2016-07-18T21:36:00.000Z\",\"published\":true,\"cover\":\"./browser.png\",\"coverAuthor\":\"Linsta\",\"coverOriginalUrl\":\"https://kinsta.com\"}","position":{"start":{"line":76,"column":1,"offset":2573},"end":{"line":76,"column":186,"offset":2758},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":186,"offset":2758}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"关于浏览器缓存\",\n  \"date\": \"2016-07-18T21:36:00.000Z\",\n  \"published\": true,\n  \"cover\": \"./browser.png\",\n  \"coverAuthor\": \"Linsta\",\n  \"coverOriginalUrl\": \"https://kinsta.com\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u6D4F\\u89C8\\u5668\\u7F13\\u5B58\\u5C31\\u662F\\u5C06web\\u8D44\\u6E90\\u4FDD\\u5B58\\u5728\\u672C\\u5730\\uFF0C\\u5C31\\u4E0D\\u7528\\u518D\\u6BCF\\u6B21\\u90FD\\u5411\\u670D\\u52A1\\u5668\\u8BF7\\u6C42\\u76F8\\u540C\\u7684\\u8D44\\u6E90\\u3002\\u5F53\\u4E0B\\u4E00\\u4E2A\\u8BF7\\u6C42\\u53D1\\u8D77\\uFF0C\\u5982\\u679C\\u662F\\u540C\\u6837\\u7684url\\uFF0C\\u6D4F\\u89C8\\u5668\\u4F1A\\u6839\\u636E\\u7F13\\u5B58\\u673A\\u5236\\u6765\\u51B3\\u5B9A\\u662F\\u8BFB\\u53D6\\u672C\\u5730\\u7684\\u5185\\u5BB9\\u8FD8\\u662F\\u5411\\u670D\\u52A1\\u5668\\u53D1\\u9001\\u8BF7\\u6C42\\u3002\\u663E\\u800C\\u6613\\u89C1\\uFF0C\\u6D4F\\u89C8\\u5668\\u7F13\\u5B58\\u53EF\\u4EE5\\u51CF\\u5C11\\u5E26\\u5BBD\\u6D88\\u8017\\uFF0C\\u52A0\\u5FEB\\u7528\\u6237\\u7684\\u8BBF\\u95EE\\u901F\\u5EA6\\u540C\\u65F6\\u51CF\\u8F7B\\u670D\\u52A1\\u5668\\u538B\\u529B\\u3002\"), mdx(\"p\", null, \"\\u6D4F\\u89C8\\u5668\\u7684\\u7F13\\u5B58\\u673A\\u5236\\u4E3B\\u8981\\u5206\\u4E3A\\u4E24\\u79CD\\uFF0Chttp\\u534F\\u8BAE\\u5B9A\\u4E49\\u7684\\u7F13\\u5B58\\u673A\\u5236\\u548C\\u975Ehttp\\u534F\\u8BAE\\u5B9A\\u4E49\\u7684\\u7F13\\u5B58\\u673A\\u5236\\u3002\\u540E\\u8005\\u4E3B\\u8981\\u901A\\u8FC7\\u5728html\\u6587\\u4EF6\\u4E2D\\u8BBE\\u7F6E\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"meta\\u6807\\u7B7E\"), \"\\u6765\\u5B9E\\u73B0\\u3002\"), mdx(\"h2\", {\n    \"id\": \"与缓存相关的首部字段\"\n  }, \"\\u4E0E\\u7F13\\u5B58\\u76F8\\u5173\\u7684\\u9996\\u90E8\\u5B57\\u6BB5\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://o7ts2uaks.bkt.clouddn.com/CACHE.png\",\n    \"alt\": \"http首部字段\"\n  }))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://o7ts2uaks.bkt.clouddn.com/w704.jpg\",\n    \"alt\": \"状态图\"\n  }))), mdx(\"h3\", {\n    \"id\": \"pragma与expires\"\n  }, \"Pragma\\u4E0EExpires\"), mdx(\"p\", null, \"\\u7531\\u4E0A\\u8868\\u53EF\\u4EE5\\u770B\\u5230\\uFF0CPragma\\u4E0EExpires\\u662Fhttp1.0\\u4E2D\\u7684\\u5185\\u5BB9\\uFF0C\\u662F\\u65E9\\u671F\\u7684\\u6D4F\\u89C8\\u5668\\u7F13\\u5B58\\u7B56\\u7565\\uFF0C\\u73B0\\u5728\\u6211\\u4EEC\\u4E5F\\u4F1A\\u7ECF\\u5E38\\u770B\\u5230\\u770B\\u5230\\u8FD9\\u4E24\\u4E2A\\u5B57\\u6BB5\\uFF0C\\u4E3A\\u7684\\u662Fhttp\\u534F\\u8BAE\\u5411\\u4E0B\\u517C\\u5BB9\\u3002\\nPragma\\u5C5E\\u4E8E\\u901A\\u7528\\u9996\\u90E8\\u5B57\\u6BB5\\uFF0C\\u5728\\u8BF7\\u6C42\\u548C\\u54CD\\u5E94\\u62A5\\u6587\\u7AE0\\u90FD\\u53EF\\u4EE5\\u8BBE\\u7F6E\\uFF0C\\u4E00\\u822C\\u8981\\u6C42Pragama\\u6307\\u4EE4\\u8BBE\\u5B9A\\u5728html\\u6587\\u4EF6\\u4E2D\\u7684\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"<meta>\\u6807\\u7B7E\")), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"<meta http-equiv=\\\"Pragma\\\" content=\\\"no-cache\\\">\"), \"\\n\\u4E0D\\u8FC7Pragma\\u4E00\\u822C\\u53EA\\u6709\\u5728\\u8BBE\\u7F6E\\u4E8E\\u54CD\\u5E94\\u62A5\\u6587\\u4E2D\\u65F6\\u624D\\u4F1A\\u751F\\u6548\\u3002\"), mdx(\"p\", null, \"Expires\\u662F\\u54CD\\u5E94\\u5934\\u5B57\\u6BB5\\uFF0C\\u7528\\u6765\\u542F\\u7528\\u7F13\\u5B58\\u548C\\u89C4\\u5B9A\\u7F13\\u5B58\\u5931\\u6548\\u65F6\\u95F4\\u3002Expires\\u7684\\u503C\\u5BF9\\u5E94\\u4E00\\u4E2AGMT\\u65F6\\u95F4\\uFF0C\\u6BD4\\u5982\\u201CMon, 22 Jul 2002 11:12:01 GMT\\u201D\\u6765\\u544A\\u8BC9\\u6D4F\\u89C8\\u5668\\u8D44\\u6E90\\u7F13\\u5B58\\u8FC7\\u671F\\u65F6\\u95F4\\uFF0C\\u5982\\u679C\\u8FD8\\u6CA1\\u8FC7\\u8BE5\\u65F6\\u95F4\\u70B9\\u5219\\u4E0D\\u53D1\\u8BF7\\u6C42\\u3002\"), mdx(\"p\", null, \"\\u5982\\u679C\\u5728meta\\u6807\\u7B7E\\u4E2D\\u8BBE\\u7F6Eexpires\\u53EA\\u662F\\u80FD\\u8BBE\\u7F6E\\u9875\\u9762\\u5728IE\\u6D4F\\u89C8\\u5668\\u4E2D\\u662F\\u5426\\u7F13\\u5B58\\uFF08\\u5BF9\\u9875\\u9762\\u8D44\\u6E90\\u65E0\\u6548\\uFF09\\u3002\\u5982\\u679C\\u662F\\u5728\\u670D\\u52A1\\u7AEF\\u62A5\\u5934\\u8FD4\\u56DEExpires\\u5B57\\u6BB5\\uFF0C\\u5219\\u5728\\u4EFB\\u4F55\\u6D4F\\u89C8\\u5668\\u4E2D\\u90FD\\u80FD\\u6B63\\u786E\\u8BBE\\u7F6E\\u8D44\\u6E90\\u7F13\\u5B58\\u7684\\u65F6\\u95F4\\u3002\\u9700\\u8981\\u6CE8\\u610F\\u7684\\u662F\\uFF0Cexpires\\u8BBE\\u7F6E\\u7684\\u7F13\\u5B58\\u65F6\\u95F4\\u662F\\u76F8\\u5BF9\\u670D\\u52A1\\u5668\\u4E0A\\u65F6\\u95F4\\u800C\\u8A00\\u7684\\uFF0C\\u5982\\u679C\\u5BA2\\u6237\\u7AEF\\u65F6\\u95F4\\u4E0E\\u670D\\u52A1\\u5668\\u65F6\\u95F4\\u4E0D\\u4E00\\u81F4\\uFF0C\\u8FD9\\u4E2A\\u7F13\\u5B58\\u4E5F\\u5C31\\u6CA1\\u610F\\u4E49\\u4E86\\u3002\"), mdx(\"p\", null, \"\\u53E6\\u5916\\uFF0C\\u540C\\u65F6\\u8BBE\\u7F6EExpires\\u548CPragma\\u7684\\u8BDD\\uFF0CPragma\\u7684\\u4F18\\u5148\\u7EA7\\u4F1A\\u66F4\\u9AD8\\u3002\"), mdx(\"h3\", {\n    \"id\": \"cache-control\"\n  }, \"Cache-Control\"), mdx(\"p\", null, \"Cache-Control\\u5206\\u522B\\u80FD\\u5728\\u8BF7\\u6C42\\u62A5\\u6587\\u548C\\u54CD\\u5E94\\u62A5\\u6587\\u4E2D\\u4F7F\\u7528\\uFF0C\\u6765\\u5B9A\\u4E49\\u7F13\\u5B58\\u6709\\u6548\\u65F6\\u95F4\\uFF0C\\u4F18\\u5148\\u7EA7\\u9AD8\\u4E8EPragma\\u4E0EExpires\\u3002Cache-Control\\u4E5F\\u4FEE\\u6B63\\u4E86\\u4E0A\\u8FF0Expires\\u65F6\\u95F4\\u5DEE\\u7684\\u95EE\\u9898\\u3002\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://ww3.sinaimg.cn/mw690/6941baebgw1eukzzwcvnij20gi089jvb.jpg\",\n    \"alt\": \"cache-control可设置的值\"\n  }))), mdx(\"h3\", {\n    \"id\": \"last-modified\"\n  }, \"Last-Modified\"), mdx(\"p\", null, \"\\u6D4F\\u89C8\\u5668\\u7B2C\\u4E00\\u6B21\\u8BF7\\u6C42\\u67D0URL\\u65F6\\u4F1A\\u8FD4\\u56DE200\\uFF0C\\u5185\\u5BB9\\u662F\\u6240\\u8BF7\\u6C42\\u7684\\u8D44\\u6E90\\u3002\\u670D\\u52A1\\u5668\\u5C06\\u8D44\\u6E90\\u4F20\\u9012\\u7ED9\\u5BA2\\u6237\\u7AEF\\u65F6\\uFF0C\\u4F1A\\u5C06\\u8D44\\u6E90\\u6700\\u540E\\u66F4\\u6539\\u7684\\u65F6\\u95F4\\u4EE5\\u201CLast-Modified: GMT\\u201D\\u7684\\u5F62\\u5F0F\\u52A0\\u5728\\u5B9E\\u4F53\\u9996\\u90E8\\u4E0A\\u4E00\\u8D77\\u8FD4\\u56DE\\u7ED9\\u5BA2\\u6237\\u7AEF\\u3002\"), mdx(\"p\", null, \"\\u5BA2\\u6237\\u7AEF\\u4F1A\\u4E3A\\u8D44\\u6E90\\u6807\\u8BB0\\u4E0A\\u8BE5\\u4FE1\\u606F\\uFF0C\\u4E0B\\u6B21\\u518D\\u6B21\\u8BF7\\u6C42\\u65F6\\uFF0C\\u4F1A\\u628A\\u8BE5\\u4FE1\\u606F\\u9644\\u5E26\\u5728\\u8BF7\\u6C42\\u62A5\\u6587\\u4E2D\\u4E00\\u5E76\\u5E26\\u7ED9\\u670D\\u52A1\\u5668\\u53BB\\u505A\\u68C0\\u67E5\\u201CIf-Modified-Since: GMT\\u201D\\uFF0C\\u82E5\\u4F20\\u9012\\u7684\\u65F6\\u95F4\\u503C\\u4E0E\\u670D\\u52A1\\u5668\\u4E0A\\u8BE5\\u8D44\\u6E90\\u6700\\u7EC8\\u4FEE\\u6539\\u65F6\\u95F4\\u662F\\u4E00\\u81F4\\u7684\\uFF0C\\u5219\\u8BF4\\u660E\\u8BE5\\u8D44\\u6E90\\u6CA1\\u6709\\u88AB\\u4FEE\\u6539\\u8FC7\\uFF0C\\u76F4\\u63A5\\u8FD4\\u56DE304\\u72B6\\u6001\\u7801\\u5373\\u53EF\\uFF0C\\u5185\\u5BB9\\u4E3A\\u7A7A\\uFF0C\\u8282\\u7701\\u4E86\\u4F20\\u8F93\\u6570\\u636E\\u91CF\\u3002\"), mdx(\"h3\", {\n    \"id\": \"etag\"\n  }, \"ETag\"), mdx(\"p\", null, \"Http1.1\\u4E2D\\u5B9A\\u4E49\\u4E86\\u5B9E\\u4F53\\u9996\\u90E8\\u5B57\\u6BB5\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Etag\"), \"\\uFF0C\\u5373\\u5728\\u670D\\u52A1\\u5668\\u54CD\\u5E94\\u65F6\\u7ED9\\u8BF7\\u6C42\\u7684URL\\u505A\\u6807\\u8BB0\\u4E00\\u4E2A\\u552F\\u4E00\\u6807\\u8BC6\\u7B26\\uFF0C\\u5728\\u54CD\\u5E94\\u5934\\u4E2D\\u4F20\\u7ED9\\u5BA2\\u6237\\u7AEF\\u3002\\u5728\\u4E0B\\u4E00\\u6B21\\u53D1\\u8BF7\\u6C42\\u65F6\\uFF0C\\u5BA2\\u6237\\u7AEF\\u4F1A\\u5E26\\u4E0AEtag\\uFF0C\\u670D\\u52A1\\u5668\\u901A\\u8FC7\\u6BD4\\u8F83\\u670D\\u52A1\\u5668\\u4E0A\\u8D44\\u6E90\\u7684Etag\\u4E0E\\u5BA2\\u6237\\u7AEF\\u4F20\\u8FC7\\u6765\\u7684Etag\\u6765\\u5224\\u65AD\\u8D44\\u6E90\\u6709\\u6CA1\\u6709\\u88AB\\u4FEE\\u6539\\u3002\\u82E5\\u6CA1\\u88AB\\u4FEE\\u6539\\uFF0C\\u5219\\u8FD4\\u56DE304.\"), mdx(\"p\", null, \"\\u5982\\u679CLast-Modified\\u548CETag\\u540C\\u65F6\\u88AB\\u4F7F\\u7528\\uFF0C\\u5219\\u8981\\u6C42\\u5B83\\u4EEC\\u7684\\u9A8C\\u8BC1\\u90FD\\u5FC5\\u987B\\u901A\\u8FC7\\u624D\\u4F1A\\u8FD4\\u56DE304\\uFF0C\\u82E5\\u5176\\u4E2D\\u67D0\\u4E2A\\u9A8C\\u8BC1\\u6CA1\\u901A\\u8FC7\\uFF0C\\u5219\\u670D\\u52A1\\u5668\\u4F1A\\u6309\\u5E38\\u89C4\\u8FD4\\u56DE\\u8D44\\u6E90\\u5B9E\\u4F53\\u53CA200\\u72B6\\u6001\\u7801\\u3002\"), mdx(\"h2\", {\n    \"id\": \"缓存策略\"\n  }, \"\\u7F13\\u5B58\\u7B56\\u7565\"), mdx(\"h3\", {\n    \"id\": \"last-modified和etag-→-304\"\n  }, \"Last-Modified\\u548CEtag \\u2192 304\"), mdx(\"p\", null, \"\\u8FD9\\u4E24\\u4E2A\\u5B57\\u6BB5\\u7ECF\\u5E38\\u5728\\u4E00\\u8D77\\u914D\\u5408\\u4F7F\\u7528\\uFF0C\\u6765\\u5224\\u65AD\\u8D44\\u6E90\\u662F\\u5426\\u5DF2\\u88AB\\u4FEE\\u6539\\uFF0C\\u786E\\u5B9A\\u8BFB\\u53D6\\u672C\\u5730\\u7F13\\u5B58\\u8FD8\\u662F\\u91CD\\u65B0\\u8BF7\\u6C42\\u8D44\\u6E90\\u3002ETag\\u4E3B\\u8981\\u662F\\u7528\\u6765\\u89E3\\u51B3Last-Modified\\u65E0\\u6CD5\\u89E3\\u51B3\\u7684\\u95EE\\u9898\\uFF08\\u6587\\u4EF6\\u4FEE\\u6539\\u9891\\u7E41\\uFF0C\\u670D\\u52A1\\u5668\\u5F97\\u5230\\u7684\\u65F6\\u95F4\\u4E0D\\u7CBE\\u786E\\u7B49\\u7B49\\uFF09\\u3002\"), mdx(\"p\", null, \"\\u8FD9\\u4E24\\u4E2A\\u5B57\\u6BB5\\u7684\\u7279\\u70B9\\u53CA\\u5E94\\u7528\\u573A\\u666F\\u5728\\u4E8E\\uFF0C\\u672C\\u5730\\u5DF2\\u6709\\u7F13\\u5B58\\uFF0C\\u4F46\\u662F\\u5B83\\u4EEC\\u9700\\u8981\\u5411\\u670D\\u52A1\\u5668\\u53D1\\u9001\\u8BF7\\u6C42\\u6765\\u786E\\u5B9A\\u672C\\u5730\\u7F13\\u5B58\\u662F\\u5426\\u662F\\u6700\\u65B0\\u7684\\uFF0C\\u82E5\\u670D\\u52A1\\u5668\\u8BA4\\u4E3A\\u672C\\u5730\\u7F13\\u5B58\\u662F\\u6700\\u65B0\\u7684\\uFF0C\\u53EF\\u7528\\uFF0C\\u5219\\u8FD4\\u56DE304\"), mdx(\"h3\", {\n    \"id\": \"expirescache-control-→-200\"\n  }, \"Expires/Cache-Control \\u2192 200\"), mdx(\"p\", null, \"\\u533A\\u522B\\u4E8E304\\u72B6\\u6001\\u7801\\uFF0C200\\u610F\\u5473\\u7740\\u4E0D\\u5411\\u670D\\u52A1\\u5668\\u53D1\\u8BF7\\u6C42\\uFF0C\\u76F4\\u63A5\\u542F\\u7528\\u672C\\u5730\\u7F13\\u5B58\\u3002\\u5373Expires/Cache-Control\\u5B57\\u6BB5\\u901A\\u8FC7\\u7EDD\\u5BF9\\u65F6\\u95F4/\\u76F8\\u5BF9\\u65F6\\u95F4\\u5224\\u65AD\\u51FA\\u672C\\u5730\\u7F13\\u5B58\\u662F\\u6709\\u6548\\u7684\\u3002\"), mdx(\"p\", null, \"\\u601D\\u7EF4\\u5BFC\\u56FE\\u5982\\u4E0B\\uFF08\\u81EA\\u5DF1\\u753B\\u7684\\u611F\\u89C9\\u5F88\\u4E0D\\u7F8E\\u89C2 = =\\uFF09\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://o7ts2uaks.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%20%281%29.png\",\n    \"alt\": \"思维导图\"\n  }))), mdx(\"h2\", {\n    \"id\": \"用户行为与缓存\"\n  }, \"\\u7528\\u6237\\u884C\\u4E3A\\u4E0E\\u7F13\\u5B58\"), mdx(\"p\", null, \"\\u6D4F\\u89C8\\u5668\\u7F13\\u5B58\\u4E5F\\u4E0E\\u7528\\u6237\\u884C\\u4E3A\\u6709\\u5173\\uFF0C\\u5728\\u5730\\u5740\\u680F\\u6309\\u56DE\\u8F66\\u4E0E\\u76F4\\u63A5F5\\u662F\\u4E0D\\u4E00\\u6837\\u7684\\u3002\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://ww4.sinaimg.cn/mw690/6941baebgw1eukzzr7rc2j20hg04kjsd.jpg\",\n    \"alt\": \"用户行为\"\n  }))), mdx(\"p\", null, \"\\u7531\\u56FE\\u53EF\\u77E5\\uFF0C\\u5F53\\u7528\\u6237\\u6309F5\\u8FDB\\u884C\\u5237\\u65B0\\uFF0CExpires/Cache-Control\\u4F1A\\u5931\\u6548\\uFF0C\\u6D4F\\u89C8\\u5668\\u5C06\\u518D\\u6B21\\u53D1\\u9001\\u8BF7\\u6C42\\u901A\\u8FC7Last-Modified/ETag\\u6765\\u5224\\u65AD\\u7F13\\u5B58\\u662F\\u5426\\u6709\\u6548\\u3002\\u5F53\\u7528\\u6237\\u901A\\u8FC7Ctrl+F5\\u8FDB\\u884C\\u5F3A\\u5236\\u5237\\u65B0\\u65F6\\uFF0C\\u6240\\u6709\\u5B57\\u6BB5\\u90FD\\u4F1A\\u5931\\u6548\\uFF0C\\u6D4F\\u89C8\\u5668\\u5C06\\u91CD\\u65B0\\u8BF7\\u6C42\\u83B7\\u53D6\\u8D44\\u6E90\\u3002\"), mdx(\"h3\", {\n    \"id\": \"参考内容\"\n  }, \"\\u53C2\\u8003\\u5185\\u5BB9\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\"\n  }), \"w3:HTTP1.1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.cnblogs.com/vajoy/p/5341664.html\"\n  }), \"vajoy:\\u6D45\\u8C08\\u6D4F\\u89C8\\u5668http\\u7684\\u7F13\\u5B58\\u673A\\u5236\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.laruence.com/2010/03/05/1332.html\"\n  }), \"\\u9E1F\\u54E5:\\u6D4F\\u89C8\\u5668\\u7F13\\u5B58\\u673A\\u5236\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://blog.csdn.net/eroswang/article/details/8302191\"\n  }), \"eroswang:\\u6D4F\\u89C8\\u5668\\u7F13\\u5B58\\u8BE6\\u89E3\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"关于浏览器缓存\",\n  \"date\": \"2016-07-18T21:36:00.000Z\",\n  \"published\": true,\n  \"cover\": \"./browser.png\",\n  \"coverAuthor\": \"Linsta\",\n  \"coverOriginalUrl\": \"https://kinsta.com\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`浏览器缓存就是将web资源保存在本地，就不用再每次都向服务器请求相同的资源。当下一个请求发起，如果是同样的url，浏览器会根据缓存机制来决定是读取本地的内容还是向服务器发送请求。显而易见，浏览器缓存可以减少带宽消耗，加快用户的访问速度同时减轻服务器压力。`}</p>\n    <p>{`浏览器的缓存机制主要分为两种，http协议定义的缓存机制和非http协议定义的缓存机制。后者主要通过在html文件中设置`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`meta标签`}</code>{`来实现。`}</p>\n    <h2 {...{\n      \"id\": \"与缓存相关的首部字段\"\n    }}>{`与缓存相关的首部字段`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"http://o7ts2uaks.bkt.clouddn.com/CACHE.png\",\n        \"alt\": \"http首部字段\"\n      }}></img></p>\n    {\n      /*more*/\n    }\n    <p><img parentName=\"p\" {...{\n        \"src\": \"http://o7ts2uaks.bkt.clouddn.com/w704.jpg\",\n        \"alt\": \"状态图\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"pragma与expires\"\n    }}>{`Pragma与Expires`}</h3>\n    <p>{`由上表可以看到，Pragma与Expires是http1.0中的内容，是早期的浏览器缓存策略，现在我们也会经常看到看到这两个字段，为的是http协议向下兼容。\nPragma属于通用首部字段，在请求和响应报文章都可以设置，一般要求Pragama指令设定在html文件中的`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<meta>标签`}</code></p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`<meta http-equiv=\"Pragma\" content=\"no-cache\">`}</code>{`\n不过Pragma一般只有在设置于响应报文中时才会生效。`}</p>\n    <p>{`Expires是响应头字段，用来启用缓存和规定缓存失效时间。Expires的值对应一个GMT时间，比如“Mon, 22 Jul 2002 11:12:01 GMT”来告诉浏览器资源缓存过期时间，如果还没过该时间点则不发请求。`}</p>\n    <p>{`如果在meta标签中设置expires只是能设置页面在IE浏览器中是否缓存（对页面资源无效）。如果是在服务端报头返回Expires字段，则在任何浏览器中都能正确设置资源缓存的时间。需要注意的是，expires设置的缓存时间是相对服务器上时间而言的，如果客户端时间与服务器时间不一致，这个缓存也就没意义了。`}</p>\n    <p>{`另外，同时设置Expires和Pragma的话，Pragma的优先级会更高。`}</p>\n    <h3 {...{\n      \"id\": \"cache-control\"\n    }}>{`Cache-Control`}</h3>\n    <p>{`Cache-Control分别能在请求报文和响应报文中使用，来定义缓存有效时间，优先级高于Pragma与Expires。Cache-Control也修正了上述Expires时间差的问题。\n`}<img parentName=\"p\" {...{\n        \"src\": \"http://ww3.sinaimg.cn/mw690/6941baebgw1eukzzwcvnij20gi089jvb.jpg\",\n        \"alt\": \"cache-control可设置的值\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"last-modified\"\n    }}>{`Last-Modified`}</h3>\n    <p>{`浏览器第一次请求某URL时会返回200，内容是所请求的资源。服务器将资源传递给客户端时，会将资源最后更改的时间以“Last-Modified: GMT”的形式加在实体首部上一起返回给客户端。`}</p>\n    <p>{`客户端会为资源标记上该信息，下次再次请求时，会把该信息附带在请求报文中一并带给服务器去做检查“If-Modified-Since: GMT”，若传递的时间值与服务器上该资源最终修改时间是一致的，则说明该资源没有被修改过，直接返回304状态码即可，内容为空，节省了传输数据量。`}</p>\n    <h3 {...{\n      \"id\": \"etag\"\n    }}>{`ETag`}</h3>\n    <p>{`Http1.1中定义了实体首部字段`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Etag`}</code>{`，即在服务器响应时给请求的URL做标记一个唯一标识符，在响应头中传给客户端。在下一次发请求时，客户端会带上Etag，服务器通过比较服务器上资源的Etag与客户端传过来的Etag来判断资源有没有被修改。若没被修改，则返回304.`}</p>\n    <p>{`如果Last-Modified和ETag同时被使用，则要求它们的验证都必须通过才会返回304，若其中某个验证没通过，则服务器会按常规返回资源实体及200状态码。`}</p>\n    <h2 {...{\n      \"id\": \"缓存策略\"\n    }}>{`缓存策略`}</h2>\n    <h3 {...{\n      \"id\": \"last-modified和etag-→-304\"\n    }}>{`Last-Modified和Etag → 304`}</h3>\n    <p>{`这两个字段经常在一起配合使用，来判断资源是否已被修改，确定读取本地缓存还是重新请求资源。ETag主要是用来解决Last-Modified无法解决的问题（文件修改频繁，服务器得到的时间不精确等等）。`}</p>\n    <p>{`这两个字段的特点及应用场景在于，本地已有缓存，但是它们需要向服务器发送请求来确定本地缓存是否是最新的，若服务器认为本地缓存是最新的，可用，则返回304`}</p>\n    <h3 {...{\n      \"id\": \"expirescache-control-→-200\"\n    }}>{`Expires/Cache-Control → 200`}</h3>\n    <p>{`区别于304状态码，200意味着不向服务器发请求，直接启用本地缓存。即Expires/Cache-Control字段通过绝对时间/相对时间判断出本地缓存是有效的。`}</p>\n    <p>{`思维导图如下（自己画的感觉很不美观 = =）`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"http://o7ts2uaks.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%20%281%29.png\",\n        \"alt\": \"思维导图\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"用户行为与缓存\"\n    }}>{`用户行为与缓存`}</h2>\n    <p>{`浏览器缓存也与用户行为有关，在地址栏按回车与直接F5是不一样的。`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"http://ww4.sinaimg.cn/mw690/6941baebgw1eukzzr7rc2j20hg04kjsd.jpg\",\n        \"alt\": \"用户行为\"\n      }}></img></p>\n    <p>{`由图可知，当用户按F5进行刷新，Expires/Cache-Control会失效，浏览器将再次发送请求通过Last-Modified/ETag来判断缓存是否有效。当用户通过Ctrl+F5进行强制刷新时，所有字段都会失效，浏览器将重新请求获取资源。`}</p>\n    <h3 {...{\n      \"id\": \"参考内容\"\n    }}>{`参考内容`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\"\n        }}>{`w3:HTTP1.1`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.cnblogs.com/vajoy/p/5341664.html\"\n        }}>{`vajoy:浅谈浏览器http的缓存机制`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.laruence.com/2010/03/05/1332.html\"\n        }}>{`鸟哥:浏览器缓存机制`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://blog.csdn.net/eroswang/article/details/8302191\"\n        }}>{`eroswang:浏览器缓存详解`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}